local player = game:GetService("Players").LocalPlayer
local replicatedStorage = game:GetService("ReplicatedStorage")
local workspace = game:GetService("Workspace")
local spawnRemote = replicatedStorage:WaitForChild("ClientRemotes"):WaitForChild("SpawnHandler")
local aiCharacters = workspace:WaitForChild("AiCharacters")
local questHolder = player.PlayerGui.GameUI.Quests.QuestHolder
local targetQuestName = "Defeat Strong Souls"
local targetEnemies = {"Gravitron Soul", "Time Soul", "Light Soul"}
local punchToolName = "Katana"
local skillNames = {"Lion's Slash", "Nadeshiko Field", "Conqueror's Will"}
local teleportPosition = Vector3.new(232, 3, -703)
local questNPCPosition = Vector3.new(232, 3, -703)
local autoClickPosition = Vector2.new(903, 478)
local floatName = "FloatingPlatform"
local StarterGui = game:GetService("StarterGui")
local toggle = false
local lastSkillUse = 0
local isCharacterAliveFlag = false
local HealthFlag = true
local webhookURL = "YOUR_DISCORD_WEBHOOK_URL"

local function sendNotification(title, text)
    StarterGui:SetCore("SendNotification", {
        Title = title;
        Text = text;
        Duration = 2;
    })
end

local function sendDiscordNotification(status, details)
    local data = {
        ["username"] = "Quest Notifier",
        ["embeds"] = {{
            ["title"] = "**Quest Update: " .. status .. "**",
            ["description"] = details,
            ["color"] = status == "Quest Completed" and 65280 or 16711680,
            ["footer"] = {
                ["text"] = "Roblox Quest Notifier",
            },
            ["timestamp"] = os.date("!%Y-%m-%dT%H:%M:%SZ")
        }}
    }

    local jsonData = game:GetService("HttpService"):JSONEncode(data)

    pcall(function()
        syn.request({
            Url = webhookURL,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = jsonData
        })
    end)
end

local function isCharacterAlive()
    local character = workspace:FindFirstChild("Venqtrix")
    isCharacterAliveFlag = character and character:FindFirstChild("Customizations") ~= nil
    return isCharacterAliveFlag
end

local function createFloatingPlatform()
    local character = player.Character
    if character and not character:FindFirstChild(floatName) then
        local Float = Instance.new('Part')
        Float.Name = floatName
        Float.Parent = character
        Float.Transparency = 1
        Float.Size = Vector3.new(2, 0.2, 1.5)
        Float.Anchored = true
        local FloatValue = -3.1

        local function FloatPadLoop()
            if character:FindFirstChild(floatName) and character:FindFirstChild("HumanoidRootPart") then
                Float.CFrame = character.HumanoidRootPart.CFrame * CFrame.new(0, FloatValue, 0)
            else
                Float:Destroy()
            end
            wait(0.2)
        end

        game:GetService("RunService").Heartbeat:Connect(FloatPadLoop)
        sendNotification("Platform", "Floating platform created under character.")
    end
end

local function simulateHoldClick(duration)
    local VirtualInputManager = game:GetService("VirtualInputManager")
    VirtualInputManager:SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, true, game, 0)
    wait(duration)
    VirtualInputManager:SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, false, game, 0)
end

local function equipTool(toolName)
    local tool = player.Backpack:FindFirstChild(toolName)
    if tool then
        tool.Parent = player.Character
    end
end

local function unequipTool()
    local character = player.Character
    for _, tool in ipairs(character:GetChildren()) do
        if tool:IsA("Tool") then
            tool.Parent = player.Backpack
        end
    end
end

local function isNadeshikoFieldActive()
    return workspace.debrisHolder:FindFirstChild("NadeshikoField") ~= nil
end

local function activateSkills(currentEnemy)
    local shouldUseNadeshiko = false
    local shouldUseConqueror = false

    if currentEnemy and currentEnemy:FindFirstChild("Humanoid") then
        local humanoid = currentEnemy.Humanoid
        local healthPercentage = (humanoid.Health / humanoid.MaxHealth) * 100
        shouldUseNadeshiko = healthPercentage > 30 
        shouldUseConqueror = healthPercentage > 30
    end

    unequipTool()

    local conquerorWillTool = player.Backpack:FindFirstChild("Conqueror's Will")
    if shouldUseConqueror and conquerorWillTool then
        equipTool("Conqueror's Will")
        wait(0.5)
        unequipTool()
    end

    local lionSlashTool = player.Backpack:FindFirstChild("Lion's Slash")
    if lionSlashTool then
        equipTool("Lion's Slash")
        wait(0.5)
        unequipTool()
    end

    if shouldUseNadeshiko and not isNadeshikoFieldActive() then
        local nadeshikoTool = player.Backpack:FindFirstChild("Nadeshiko Field")
        if nadeshikoTool then
            equipTool("Nadeshiko Field")
            simulateHoldClick(5)
            unequipTool()
        end
    end

    equipTool(punchToolName)
    lastSkillUse = tick()
end

local function completeQuest()
    while isNadeshikoFieldActive() do
        wait(0.5)
    end
    sendNotification("Quest", "Teleporting to quest NPC to complete quest...")
    player.Character:SetPrimaryPartCFrame(CFrame.new(questNPCPosition))
    wait(1)

    local npc = workspace.NPCs:FindFirstChild("Agor")
    if npc then
        local prompt = npc:FindFirstChild("ProximityPrompt")
        if prompt then
            fireproximityprompt(prompt)
            for i = 1, 2 do
                if replicatedStorage.ClientRemotes:FindFirstChild("DialogueHandler") then
                    replicatedStorage.ClientRemotes.DialogueHandler:FireServer(2)
                    wait(1)
                else
                    sendNotification("Error", "DialogueHandler not found!")
                    return
                end
            end
            replicatedStorage.ClientRemotes.DialogueHandler:FireServer(1)
            wait(1)
            replicatedStorage.ClientRemotes.DialogueHandler:FireServer(1)
            sendNotification("Quest", "Quest completed successfully.")
            sendDiscordNotification("Quest Completed", "The quest 'Defeat Strong Souls' was completed by Venqtrix.")
        else
            sendNotification("Error", "Proximity prompt for NPC not found!")
        end
    else
        sendNotification("Error", "Quest NPC not found in workspace!")
    end
end

-- Main loop with necessary checks
spawn(function()
    while true do
        if toggle then
            if not isCharacterAlive() then
                HealthFlag = false
                wait(2)
                spawnRemote:FireServer(1)
                wait(5)
                createFloatingPlatform()
            else
                HealthFlag = true
            end

            if HealthFlag then
                if not hasQuest() and not isNadeshikoFieldActive() then
                    takeQuest()
                    wait(1)
                end

                if hasQuest() and isQuestCompleted() and not isNadeshikoFieldActive() then
                    completeQuest()
                    wait(1)
                    takeQuest()
                    wait(1)
                end

                if hasQuest() and not isQuestCompleted() and not isNadeshikoFieldActive() then
                    for _, enemy in ipairs(aiCharacters:GetChildren()) do
                        if isCharacterAlive() and HealthFlag and enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 then
                            for _, targetName in ipairs(targetEnemies) do
                                if enemy.Name:find(targetName) then
                                    attackEnemy(enemy)
                                    if isQuestCompleted() then
                                        completeQuest()
                                        takeQuest()
                                        break
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
        wait(0.1)
    end
end)

game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessedEvent)
    if not gameProcessedEvent then
        if input.KeyCode == Enum.KeyCode.T then
            toggle = not toggle
            sendNotification("Toggle", "Auto-farming " .. (toggle and "enabled" or "disabled"))
        end
    end
end)
