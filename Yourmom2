local player = game:GetService("Players").LocalPlayer
local replicatedStorage = game:GetService("ReplicatedStorage")
local workspace = game:GetService("Workspace")
local spawnRemote = replicatedStorage:WaitForChild("ClientRemotes"):WaitForChild("SpawnHandler")
local aiCharacters = workspace:WaitForChild("AiCharacters")
local questHolder = player.PlayerGui.GameUI.Quests.QuestHolder
local targetQuestName = "Defeat Strong Souls"
local targetEnemies = {"Gravitron Soul", "Time Soul", "Light Soul"}
local punchToolName = "Star Sword"
local teleportPosition = Vector3.new(232, 3, -703)
local autoClickPosition = Vector2.new(903, 478)
local floatName = "FloatingPlatform"
local StarterGui = game:GetService("StarterGui")
local toggle = false

-- Flags
local isQuestActive = false
local isQuestCompletedFlag = false
local isTargetingEnemy = false
local isCharacterAliveFlag = true  -- Assume character is alive initially
local isDeadFlag = false  -- Flag to indicate if the character is dead

local function sendNotification(title, text)
    StarterGui:SetCore("SendNotification", {
        Title = title;
        Text = text;
        Duration = 5;
    })
end

-- Check if the character is alive by verifying the "Customizations" path
local function isCharacterAlive()
    local character = workspace:FindFirstChild("Venqtrix")
    if character and character:FindFirstChild("Customizations") then
        isCharacterAliveFlag = true
        isDeadFlag = false
    else
        isCharacterAliveFlag = false
        isDeadFlag = true
    end
    return isCharacterAliveFlag
end

-- Create the floating platform for the character
local function createFloatingPlatform()
    local character = player.Character
    if character and not character:FindFirstChild(floatName) then
        local Float = Instance.new('Part')
        Float.Name = floatName
        Float.Parent = character
        Float.Transparency = 1
        Float.Size = Vector3.new(2, 0.2, 1.5)
        Float.Anchored = true
        local FloatValue = -3.1

        local function FloatPadLoop()
            if character:FindFirstChild(floatName) and character:FindFirstChild("HumanoidRootPart") then
                Float.CFrame = character.HumanoidRootPart.CFrame * CFrame.new(0, FloatValue, 0)
            else
                Float:Destroy()
            end
        end

        game:GetService("RunService").Heartbeat:Connect(FloatPadLoop)
        sendNotification("Platform", "Floating platform created under character.")
    end
end

-- Respawn the character if dead
local function respawnCharacter()
    if isDeadFlag then
        sendNotification("Character Status", "Character is dead, respawning now...")
        spawnRemote:FireServer(1)  -- Trigger respawn with spawn remote
        wait(2)  -- Wait for respawn
        createFloatingPlatform()  -- Create floating platform after respawn
        isCharacterAliveFlag = true  -- Mark the character as alive
        isDeadFlag = false  -- Reset dead flag
        sendNotification("Character Status", "Character respawned successfully.")
    else
        sendNotification("Character Status", "Character is still alive, no respawn needed.")
    end
end

-- Check if a quest is active
local function hasQuest()
    if questHolder:FindFirstChild("Quest") and questHolder.Quest:FindFirstChild("QuestName") then
        local questName = questHolder.Quest.QuestName.ContentText
        sendNotification("Quest Status", "Currently active quest: " .. questName)
        return questName == targetQuestName
    else
        sendNotification("Quest Status", "No active quest found in QuestHolder.")
    end
    return false
end

-- Check if the active quest is completed
local function isQuestCompleted()
    local questProgressPath = player.PlayerGui.GameUI.Quests.InformationFrame.ScrollingFrame:FindFirstChild("QuestPartProgress")
    if questProgressPath and questProgressPath:FindFirstChild("Progress") then
        sendNotification("Quest Progress", "Quest progress: " .. questProgressPath.Progress.ContentText)
        return questProgressPath.Progress.ContentText == "3/3"
    else
        sendNotification("Quest Progress", "Quest progress path or progress not found.")
    end
    return false
end

-- Equip the punch tool to the character
local function equipPunchTool()
    local tool = player.Backpack:FindFirstChild(punchToolName)
    if tool then
        tool.Parent = player.Character
    end
end

-- Take the quest by interacting with the NPC
local function takeQuest()
    sendNotification("Quest", "Attempting to take quest...")
    player.Character:SetPrimaryPartCFrame(CFrame.new(teleportPosition))
    wait(1)
    fireproximityprompt(workspace.NPCs.Agor.ProximityPrompt)

    for _ = 1, 4 do
        replicatedStorage.ClientRemotes.DialogueHandler:FireServer(1)
        wait(1)
    end
end

-- Complete the active quest by interacting with the NPC
local function completeQuest()
    sendNotification("Quest", "Starting quest completion process...")
    player.Character:SetPrimaryPartCFrame(CFrame.new(teleportPosition))
    wait(1)

    local prompt = workspace.NPCs.Agor:FindFirstChild("ProximityPrompt")
    if prompt then
        fireproximityprompt(prompt)
    else
        sendNotification("Quest", "Proximity prompt not found!")
        return
    end

    for i = 1, 2 do
        replicatedStorage.ClientRemotes.DialogueHandler:FireServer(2)
        wait(1)
    end
    replicatedStorage.ClientRemotes.DialogueHandler:FireServer(1)
    wait(1)
    replicatedStorage.ClientRemotes.DialogueHandler:FireServer(1)

    sendNotification("Quest", "Quest completion process finished.")
end

-- Attack the given enemy
local function attackEnemy(enemy)
    sendNotification("Combat", "Attacking enemy: " .. enemy.Name)
    while enemy.Parent and enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 and isCharacterAlive() do
        local enemyPos = enemy.PrimaryPart.Position - enemy.PrimaryPart.CFrame.LookVector * 5
        player.Character:SetPrimaryPartCFrame(CFrame.new(enemyPos, enemy.PrimaryPart.Position))

        equipPunchTool()

        game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, true, nil, 0)
        wait(0.1)
        game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, false, nil, 0)

        wait(0.1)
    end
    wait(0.5)
end

-- Main loop
spawn(function()
    while true do
        if toggle then
            if isDeadFlag then
                respawnCharacter()
                wait(2)  -- Wait for respawn to complete before continuing
            end

            -- If the character is dead, skip all other actions
            if not isDeadFlag then
                equipPunchTool()

                if not hasQuest() then
                    sendNotification("Quest", "Quest not active. Attempting to take quest.")
                    takeQuest()
                    wait(2)
                end

                if hasQuest() and isQuestCompleted() then
                    sendNotification("Quest", "Quest completed. Attempting to complete quest dialogue.")
                    completeQuest()
                    wait(2)
                end

                if hasQuest() then
                    for _, enemy in ipairs(aiCharacters:GetChildren()) do
                        if isCharacterAlive() and enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 then
                            for _, targetName in ipairs(targetEnemies) do
                                if enemy.Name:find(targetName) then
                                    attackEnemy(enemy)
                                    if isQuestCompleted() then
                                        sendNotification("Quest", "Quest completed after enemy defeat.")
                                        completeQuest()
                                        break
                                    end
                                end
                            end
                        end
                    end
                end
            end

            wait(0.5)
        else
            wait(0.1)
        end
    end
end)

-- Toggle autofarm with the "P" key
game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessedEvent)
    if not gameProcessedEvent and input.KeyCode == Enum.KeyCode.P then
        toggle = not toggle
        local status = toggle and "enabled" or "disabled"
        sendNotification("Autofarm", "Autofarm " .. status)
    end
end)
