local player = game:GetService("Players").LocalPlayer
local replicatedStorage = game:GetService("ReplicatedStorage")
local workspace = game:GetService("Workspace")
local spawnRemote = replicatedStorage:WaitForChild("ClientRemotes"):WaitForChild("SpawnHandler")
local aiCharacters = workspace:WaitForChild("AiCharacters")
local questHolder = player.PlayerGui.GameUI.Quests.QuestHolder
local targetQuestName = "Defeat Strong Souls"
local targetEnemies = {"Gravitron Soul", "Time Soul", "Light Soul"}
local punchToolName = "Katana"
local skillNames = {"Lion's Slash"}
local nadeshikoSkill = "Nadeshiko Field"
local teleportPosition = Vector3.new(232, 3, -703)
local questNPCPosition = Vector3.new(232, 3, -703)
local autoClickPosition = Vector2.new(903, 478)
local floatName = "FloatingPlatform"
local StarterGui = game:GetService("StarterGui")
local toggle = false

local lastSkillUse = 0
local isCharacterAliveFlag = false
local HealthFlag = true

local function sendNotification(title, text)
    StarterGui:SetCore("SendNotification", {
        Title = title;
        Text = text;
        Duration = 2;
    })
end

local function isCharacterAlive()
    local character = workspace:FindFirstChild("Venqtrix")
    isCharacterAliveFlag = character and character:FindFirstChild("Customizations") ~= nil
    return isCharacterAliveFlag
end

local function createFloatingPlatform()
    local character = player.Character
    if character and not character:FindFirstChild(floatName) then
        local Float = Instance.new('Part')
        Float.Name = floatName
        Float.Parent = character
        Float.Transparency = 1
        Float.Size = Vector3.new(2, 0.2, 1.5)
        Float.Anchored = true
        local FloatValue = -3.1

        local function FloatPadLoop()
            if character:FindFirstChild(floatName) and character:FindFirstChild("HumanoidRootPart") then
                Float.CFrame = character.HumanoidRootPart.CFrame * CFrame.new(0, FloatValue, 0)
            else
                Float:Destroy()
            end
            wait(0.2)
        end

        game:GetService("RunService").Heartbeat:Connect(FloatPadLoop)
        sendNotification("Platform", "Floating platform created under character.")
    end
end

local function respawnCharacter()
    if not isCharacterAlive() then
        sendNotification("Character Status", "Character is dead, respawning in 2 seconds...")
        wait(2)
        spawnRemote:FireServer(1)
        wait(2)
        createFloatingPlatform()
        sendNotification("Character Status", "Character respawned successfully.")
    end
end

local function hasQuest()
    if questHolder:FindFirstChild("Quest") and questHolder.Quest:FindFirstChild("QuestName") then
        local questName = questHolder.Quest.QuestName.ContentText
        return questName == targetQuestName
    end
    return false
end

local function isQuestCompleted()
    local questProgressPath = player.PlayerGui.GameUI.Quests.InformationFrame.ScrollingFrame:FindFirstChild("QuestPartProgress")
    return questProgressPath and questProgressPath.Progress.ContentText == "3/3"
end

local function equipTool(toolName)
    local tool = player.Backpack:FindFirstChild(toolName)
    if tool then
        tool.Parent = player.Character
    end
end

local function unequipTool()
    local character = player.Character
    for _, tool in ipairs(character:GetChildren()) do
        if tool:IsA("Tool") then
            tool.Parent = player.Backpack
        end
    end
end

local function equipTool(toolName)
    local tool = player.Backpack:FindFirstChild(toolName)
    if tool then
        unequipTool()  -- Ensure no other tool is equipped
        tool.Parent = player.Character
    end
end

local function activateSkills()
    -- First, activate Lion's Slash if available
    local lionSkill = player.Backpack:FindFirstChild(skillNames[1])
    if lionSkill and not lionSkill.Name:match("%d") then
        equipTool(skillNames[1])
        
        -- Activate Lion's Slash with clicks
        for _ = 1, 3 do
            game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, true, nil, 0)
            wait(0.1)
            game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, false, nil, 0)
        end
        lastSkillUse = tick()  -- Update last skill use time

        -- Unequip after use
        unequipTool()
        
        -- Wait 1 second before activating Nadeshiko Field
        wait(1)
        
        -- Check for and activate Nadeshiko Field if available
        local nadeshikoSkillTool = player.Backpack:FindFirstChild(nadeshikoSkill)
        if nadeshikoSkillTool and not nadeshikoSkillTool.Name:match("%d") then
            equipTool(nadeshikoSkill)

            -- Hold LMB to activate Nadeshiko Field for 10 seconds
            local VirtualInputManager = game:GetService("VirtualInputManager")
            VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, game, 0)
            wait(10)
            VirtualInputManager:SendMouseButtonEvent(0, 0, 0, false, game, 0)

            -- Unequip after use
            unequipTool()
        end
    end
end

-- The remaining functions (respawnCharacter, hasQuest, takeQuest, completeQuest, attackEnemy, etc.) are the same as before

spawn(function()
    while true do
        if toggle then
            if not isCharacterAlive() then
                HealthFlag = false
                respawnCharacter()
            else
                HealthFlag = true
            end

            if HealthFlag then
                if not hasQuest() then
                    sendNotification("Quest", "No active quest, attempting to start quest.")
                    takeQuest()
                    wait(1)
                end

                if hasQuest() and isQuestCompleted() then
                    sendNotification("Quest", "Quest completed, turning in.")
                    completeQuest()
                    wait(1)
                    takeQuest()
                    wait(1)
                end

                if hasQuest() then
                    for _, enemy in ipairs(aiCharacters:GetChildren()) do
                        if isCharacterAlive() and HealthFlag and enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 then
                            for _, targetName in ipairs(targetEnemies) do
                                if enemy.Name:find(targetName) then
                                    attackEnemy(enemy)
                                    if isQuestCompleted() then
                                        completeQuest()
                                        takeQuest()
                                        break
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
        wait(0.1)
    end
end)

game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessedEvent)
    if not gameProcessedEvent then
        if input.KeyCode == Enum.KeyCode.T then
            toggle = not toggle
            sendNotification("Toggle", "Auto-farming " .. (toggle and "enabled" or "disabled"))
        end
    end
end)
