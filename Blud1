local player = game:GetService("Players").LocalPlayer
local replicatedStorage = game:GetService("ReplicatedStorage")
local workspace = game:GetService("Workspace")
local spawnRemote = replicatedStorage:WaitForChild("ClientRemotes"):WaitForChild("SpawnHandler")
local aiCharacters = workspace:WaitForChild("AiCharacters")
local questHolder = player.PlayerGui.GameUI.Quests.QuestHolder
local targetQuestName = "Defeat Strong Souls"
local targetEnemies = {"Gravitron Soul", "Time Soul", "Light Soul"}
local punchToolName = "Katana"
local skillNames = {"Lion's Slash", "Nadeshiko Field"}  -- Added Nadeshiko Field
local teleportPosition = Vector3.new(232, 3, -703)
local questNPCPosition = Vector3.new(232, 3, -703)
local autoClickPosition = Vector2.new(903, 478)
local floatName = "FloatingPlatform"
local StarterGui = game:GetService("StarterGui")
local toggle = false

local lastSkillUse = 0
local isCharacterAliveFlag = false
local HealthFlag = true

local function sendNotification(title, text)
    StarterGui:SetCore("SendNotification", {
        Title = title;
        Text = text;
        Duration = 2;
    })
end

local function isCharacterAlive()
    local character = workspace:FindFirstChild("Venqtrix")
    isCharacterAliveFlag = character and character:FindFirstChild("Customizations") ~= nil
    return isCharacterAliveFlag
end

local function equipTool(toolName)
    local tool = player.Backpack:FindFirstChild(toolName)
    if tool then
        tool.Parent = player.Character
    end
end

local function unequipTool()
    local character = player.Character
    for _, tool in ipairs(character:GetChildren()) do
        if tool:IsA("Tool") then
            tool.Parent = player.Backpack
        end
    end
end

-- Function to hold and release left mouse button
local function simulateHoldClick(duration)
    local VirtualInputManager = game:GetService("VirtualInputManager")
    VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, game, 0) -- Hold LMB
    wait(duration) -- Hold duration (10 seconds)
    VirtualInputManager:SendMouseButtonEvent(0, 0, 0, false, game, 0) -- Release LMB
end

local function activateSkills()
    unequipTool()  -- Ensure no tool is equipped initially
    
    for _, skillName in ipairs(skillNames) do
        local skillTool = player.Backpack:FindFirstChild(skillName)
        if skillTool and not skillTool.Name:match("%d") then  -- Check for cooldown on name
            equipTool(skillName)  -- Equip the skill

            if skillName == "Lion's Slash" then
                -- Click auto-click position to activate Lion's Slash
                for _ = 1, 3 do
                    game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, true, nil, 0)
                    wait(0.1)
                    game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, false, nil, 0)
                end
                wait(1)  -- Wait 1 second before Nadeshiko Field

                -- Unequip Lion's Slash before Nadeshiko Field
                unequipTool()
            elseif skillName == "Nadeshiko Field" then
                -- Activate Nadeshiko Field by holding LMB for 10 seconds
                simulateHoldClick(10)
                
                -- Unequip Nadeshiko Field after the hold
                unequipTool()
            end
        end
    end
    lastSkillUse = tick()  -- Update last use time if skill was successfully used
end

local function attackEnemy(enemy)
    sendNotification("Combat", "Attacking enemy: " .. enemy.Name)

    while enemy.Parent and enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 and isCharacterAlive() and HealthFlag do
        local enemyPos = enemy.PrimaryPart.Position - enemy.PrimaryPart.CFrame.LookVector * 7
        player.Character:SetPrimaryPartCFrame(CFrame.new(enemyPos, enemy.PrimaryPart.Position))

        -- Use skills first if available (no cooldown on name)
        activateSkills()

        -- Then equip katana for standard attack
        equipTool(punchToolName)
        game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, true, nil, 0)
        wait(0.1)
        game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, false, nil, 0)
        wait(0.1)
    end
end

spawn(function()
    while true do
        if toggle then
            if not isCharacterAlive() then
                HealthFlag = false
                respawnCharacter()
            else
                HealthFlag = true
            end

            if HealthFlag then
                if not hasQuest() then
                    sendNotification("Quest", "No active quest, attempting to start quest.")
                    takeQuest()
                    wait(1)
                end

                if hasQuest() and isQuestCompleted() then
                    sendNotification("Quest", "Quest completed, turning in.")
                    completeQuest()
                    wait(1)
                    takeQuest()
                    wait(1)
                end

                if hasQuest() then
                    for _, enemy in ipairs(aiCharacters:GetChildren()) do
                        if isCharacterAlive() and HealthFlag and enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 then
                            for _, targetName in ipairs(targetEnemies) do
                                if enemy.Name:find(targetName) then
                                    attackEnemy(enemy)
                                    if isQuestCompleted() then
                                        completeQuest()
                                        takeQuest()
                                        break
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
        wait(0.1)
    end
end)

game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessedEvent)
    if not gameProcessedEvent then
        if input.KeyCode == Enum.KeyCode.T then
            toggle = not toggle
            sendNotification("Toggle", "Auto-farming " .. (toggle and "enabled" or "disabled"))
        end
    end
end)
