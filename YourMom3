local player = game:GetService("Players").LocalPlayer
local replicatedStorage = game:GetService("ReplicatedStorage")
local workspace = game:GetService("Workspace")
local spawnRemote = replicatedStorage:WaitForChild("ClientRemotes"):WaitForChild("SpawnHandler")
local aiCharacters = workspace:WaitForChild("AiCharacters")
local questHolder = player.PlayerGui.GameUI.Quests.QuestHolder
local targetQuestName = "Defeat Strong Souls"
local targetEnemies = {"Gravitron Soul", "Time Soul", "Light Soul"}
local punchToolName = "Star Sword"
local teleportPosition = Vector3.new(232, 3, -703)
local autoClickPosition = Vector2.new(903, 478)
local floatName = "FloatingPlatform"
local StarterGui = game:GetService("StarterGui")
local toggle = false
local notificationsEnabled = true

-- Cached references
local questProgressPath = player.PlayerGui.GameUI.Quests.InformationFrame.ScrollingFrame:FindFirstChild("QuestPartProgress")
local proximityPrompt = workspace.NPCs.Agor:FindFirstChild("ProximityPrompt")

local function sendNotification(title, text)
    if notificationsEnabled then
        StarterGui:SetCore("SendNotification", {
            Title = title;
            Text = text;
            Duration = 5;
        })
    end
end

local function isCharacterAlive()
    return workspace:FindFirstChild("Venqtrix") and workspace.Venqtrix:FindFirstChild("Customizations") ~= nil
end

local function createFloatingPlatform()
    local character = player.Character
    if character and not character:FindFirstChild(floatName) then
        local Float = Instance.new('Part')
        Float.Name = floatName
        Float.Parent = character
        Float.Transparency = 1
        Float.Size = Vector3.new(2, 0.2, 1.5)
        Float.Anchored = true
        local FloatValue = -3.1
        local floatDebounce = 0

        local function FloatPadLoop()
            if os.clock() - floatDebounce > 0.1 then
                floatDebounce = os.clock()
                if character:FindFirstChild(floatName) and character:FindFirstChild("HumanoidRootPart") then
                    Float.CFrame = character.HumanoidRootPart.CFrame * CFrame.new(0, FloatValue, 0)
                else
                    Float:Destroy()
                end
            end
        end
        game:GetService("RunService").Heartbeat:Connect(FloatPadLoop)
        sendNotification("Platform", "Floating platform created under character.")
    end
end

local function respawnCharacter()
    spawnRemote:FireServer(1)
    wait(2)
    createFloatingPlatform()
end

local function hasQuest()
    if questHolder:FindFirstChild("Quest") and questHolder.Quest:FindFirstChild("QuestName") then
        local questName = questHolder.Quest.QuestName.ContentText
        sendNotification("Quest Status", "Currently active quest: " .. questName)
        return questName == targetQuestName
    else
        sendNotification("Quest Status", "No active quest found in QuestHolder.")
    end
    return false
end

local function isQuestCompleted()
    if questProgressPath and questProgressPath:FindFirstChild("Progress") then
        sendNotification("Quest Progress", "Quest progress: " .. questProgressPath.Progress.ContentText)
        return questProgressPath.Progress.ContentText == "3/3"
    else
        sendNotification("Quest Progress", "Quest progress path or progress not found.")
    end
    return false
end

local function equipPunchTool()
    local tool = player.Backpack:FindFirstChild(punchToolName)
    if tool then
        tool.Parent = player.Character
    end
end

local function takeQuest()
    sendNotification("Quest", "Attempting to take quest...")
    player.Character:SetPrimaryPartCFrame(CFrame.new(teleportPosition))
    wait(1)
    fireproximityprompt(workspace.NPCs.Agor.ProximityPrompt)
    
    for i = 1, 4 do
        replicatedStorage.ClientRemotes.DialogueHandler:FireServer(i == 4 and 1 or 2)
        wait(1)
    end
end

local function completeQuest()
    sendNotification("Quest", "Starting quest completion process...")
    player.Character:SetPrimaryPartCFrame(CFrame.new(teleportPosition))
    wait(1)
    
    if proximityPrompt then
        fireproximityprompt(proximityPrompt)
    else
        sendNotification("Quest", "Proximity prompt not found!")
        return
    end
    
    for i = 1, 2 do
        replicatedStorage.ClientRemotes.DialogueHandler:FireServer(2)
        wait(1)
    end
    replicatedStorage.ClientRemotes.DialogueHandler:FireServer(1)
    wait(1)
    replicatedStorage.ClientRemotes.DialogueHandler:FireServer(1)
    
    sendNotification("Quest", "Quest completion process finished.")
end

local function attackEnemy(enemy)
    sendNotification("Combat", "Attacking enemy: " .. enemy.Name)
    equipPunchTool()
    
    while enemy.Parent and enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 and isCharacterAlive() do
        player.Character:SetPrimaryPartCFrame(enemy.PrimaryPart.CFrame * CFrame.new(0, 0, -5))
        
        for _ = 1, 3 do
            game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, true, nil, 0)
            wait(0.1)
            game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, false, nil, 0)
        end
        wait(0.1)
    end
    wait(0.5)
end

spawn(function()
    while true do
        if toggle then
            if not isCharacterAlive() then
                respawnCharacter()
                wait(2)
            else
                if not hasQuest() then
                    takeQuest()
                    wait(2)
                elseif isQuestCompleted() then
                    completeQuest()
                    wait(3)
                else
                    equipPunchTool()
                    
                    for _, enemy in ipairs(aiCharacters:GetChildren()) do
                        if isCharacterAlive() and enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 then
                            for _, targetName in ipairs(targetEnemies) do
                                if enemy.Name:find(targetName) then
                                    attackEnemy(enemy)
                                    if isQuestCompleted() then
                                        completeQuest()
                                        wait(3)
                                        if not hasQuest() then
                                            takeQuest()
                                            wait(2)
                                        end
                                        break
                                    end
                                end
                            end
                        end
                    end
                end
            end
            wait(1)
        else
            wait(0.1)
        end
    end
end)

game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessedEvent)
    if not gameProcessedEvent and input.KeyCode == Enum.KeyCode.P then
        toggle = not toggle
        local status = toggle and "enabled" or "disabled"
        sendNotification("Autofarm", "Autofarm " .. status)
    end
end)
