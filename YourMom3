local player = game:GetService("Players").LocalPlayer
local replicatedStorage = game:GetService("ReplicatedStorage")
local workspace = game:GetService("Workspace")
local spawnRemote = replicatedStorage:WaitForChild("ClientRemotes"):WaitForChild("SpawnHandler")
local aiCharacters = workspace:WaitForChild("AiCharacters")
local questHolder = player.PlayerGui.GameUI.Quests.QuestHolder
local targetQuestName = "Defeat Strong Souls"
local targetEnemies = {"Gravitron Soul", "Time Soul", "Light Soul"}
local punchToolName = "Star Sword"
local teleportPosition = Vector3.new(232, 3, -703)
local autoClickPosition = Vector2.new(903, 478)
local floatName = "FloatingPlatform"
local StarterGui = game:GetService("StarterGui")
local toggle = false

-- Flags
local isQuestActive = false
local isQuestCompletedFlag = false
local isTargetingEnemy = false
local isCharacterAliveFlag = true -- Start with true since character is alive initially

local function sendNotification(title, text)
    StarterGui:SetCore("SendNotification", {
        Title = title;
        Text = text;
        Duration = 5;
    })
end

-- Improved isCharacterAlive check
local function isCharacterAlive()
    local character = workspace:FindFirstChild("Venqtrix")
    if character and character:FindFirstChild("Customizations") then
        isCharacterAliveFlag = true
    else
        isCharacterAliveFlag = false
    end
    return isCharacterAliveFlag
end

local function createFloatingPlatform()
    local character = player.Character
    if character and not character:FindFirstChild(floatName) then
        local Float = Instance.new('Part')
        Float.Name = floatName
        Float.Parent = character
        Float.Transparency = 1
        Float.Size = Vector3.new(2, 0.2, 1.5)
        Float.Anchored = true
        local FloatValue = -3.1

        local function FloatPadLoop()
            if character:FindFirstChild(floatName) and character:FindFirstChild("HumanoidRootPart") then
                Float.CFrame = character.HumanoidRootPart.CFrame * CFrame.new(0, FloatValue, 0)
            else
                Float:Destroy()
            end
        end

        game:GetService("RunService").Heartbeat:Connect(FloatPadLoop)
        sendNotification("Platform", "Floating platform created under character.")
    end
end

local function respawnCharacter()
    if not isCharacterAliveFlag then
        spawnRemote:FireServer(1)  -- Call the respawn remote
        wait(2)  -- Wait for respawn to complete
        createFloatingPlatform()  -- Recreate the platform after respawn
        isCharacterAliveFlag = true  -- Mark the character as alive
    end
end

local function checkQuestStatus()
    local quest = questHolder:FindFirstChild("Quest")
    if quest and quest:FindFirstChild("QuestName") then
        isQuestActive = quest.QuestName.ContentText == targetQuestName
    else
        isQuestActive = false
    end
end

local function checkQuestCompletion()
    local questProgressPath = player.PlayerGui.GameUI.Quests.InformationFrame.ScrollingFrame:FindFirstChild("QuestPartProgress")
    if questProgressPath and questProgressPath:FindFirstChild("Progress") then
        isQuestCompletedFlag = questProgressPath.Progress.ContentText == "3/3"
    else
        isQuestCompletedFlag = false
    end
end

local function equipPunchTool()
    local tool = player.Backpack:FindFirstChild(punchToolName)
    if tool then
        tool.Parent = player.Character
    end
end

local function takeQuest()
    player.Character:SetPrimaryPartCFrame(CFrame.new(teleportPosition))
    wait(1)
    fireproximityprompt(workspace.NPCs.Agor.ProximityPrompt)
    
    for _ = 1, 4 do
        replicatedStorage.ClientRemotes.DialogueHandler:FireServer(1)
        wait(1)
    end
end

local function completeQuest()
    player.Character:SetPrimaryPartCFrame(CFrame.new(teleportPosition))
    wait(1)
    
    local prompt = workspace.NPCs.Agor:FindFirstChild("ProximityPrompt")
    if prompt then
        fireproximityprompt(prompt)
    end
    
    for i = 1, 2 do
        replicatedStorage.ClientRemotes.DialogueHandler:FireServer(2)
        wait(1)
    end
    replicatedStorage.ClientRemotes.DialogueHandler:FireServer(1)
    wait(1)
    replicatedStorage.ClientRemotes.DialogueHandler:FireServer(1)
end

local function attackEnemy(enemy)
    isTargetingEnemy = true
    while enemy.Parent and enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 and isCharacterAliveFlag do
        local enemyPos = enemy.PrimaryPart.Position - enemy.PrimaryPart.CFrame.LookVector * 5
        player.Character:SetPrimaryPartCFrame(CFrame.new(enemyPos, enemy.PrimaryPart.Position))
        
        equipPunchTool()
        
        game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, true, nil, 0)
        wait(0.1)
        game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, false, nil, 0)
        
        wait(0.1)
    end
    wait(0.5)
    isTargetingEnemy = false
end

spawn(function()
    while true do
        if toggle then
            -- Check if the character is alive or dead
            if not isCharacterAlive() then
                sendNotification("Status", "Character is dead, respawning...")
                respawnCharacter()
                wait(2)  -- Wait before continuing to ensure respawn has completed
            end

            equipPunchTool()

            -- Quest handling
            if not isQuestActive then
                checkQuestStatus()
                if not isQuestActive then
                    takeQuest()
                    wait(2)
                    checkQuestStatus()
                end
            end

            if isQuestActive and not isQuestCompletedFlag then
                checkQuestCompletion()
            end

            if isQuestCompletedFlag then
                completeQuest()
                wait(2)
                isQuestCompletedFlag = false
                isQuestActive = false
            end

            -- Enemy targeting and combat
            if isQuestActive and not isQuestCompletedFlag then
                for _, enemy in ipairs(aiCharacters:GetChildren()) do
                    if isCharacterAliveFlag and enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 and not isTargetingEnemy then
                        for _, targetName in ipairs(targetEnemies) do
                            if enemy.Name:find(targetName) then
                                attackEnemy(enemy)
                                if isQuestCompletedFlag then
                                    completeQuest()
                                    wait(2)
                                    isQuestCompletedFlag = false
                                    isQuestActive = false
                                    break
                                end
                            end
                        end
                    end
                end
            end
            wait(0.5)
        else
            wait(0.1)
        end
    end
end)

game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessedEvent)
    if not gameProcessedEvent and input.KeyCode == Enum.KeyCode.P then
        toggle = not toggle
        local status = toggle and "enabled" or "disabled"
        sendNotification("Autofarm", "Autofarm " .. status)
    end
end)
