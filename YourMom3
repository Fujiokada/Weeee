local player = game:GetService("Players").LocalPlayer
local replicatedStorage = game:GetService("ReplicatedStorage")
local workspace = game:GetService("Workspace")
local spawnRemote = replicatedStorage:WaitForChild("ClientRemotes"):WaitForChild("SpawnHandler")
local aiCharacters = workspace:WaitForChild("AiCharacters")
local questHolder = player.PlayerGui.GameUI.Quests.QuestHolder
local targetQuestName = "Defeat Strong Souls"
local targetEnemies = {"Gravitron Soul", "Time Soul", "Light Soul"}
local punchToolName = "Star Sword"
local teleportPosition = Vector3.new(232, 3, -703)
local autoClickPosition = Vector2.new(903, 478)
local floatName = "FloatingPlatform"
local StarterGui = game:GetService("StarterGui")
local toggle = false
local isAttacking = false

local function sendNotification(title, text)
    StarterGui:SetCore("SendNotification", {
        Title = title;
        Text = text;
        Duration = 5;
    })
end

local function isCharacterAlive()
    local character = player.Character
    return character and character:FindFirstChild("Humanoid") and character.Humanoid.Health > 0
end

local function createFloatingPlatform()
    local character = player.Character
    if character and not character:FindFirstChild(floatName) then
        local Float = Instance.new('Part')
        Float.Name = floatName
        Float.Parent = character
        Float.Transparency = 1
        Float.Size = Vector3.new(2, 0.2, 1.5)
        Float.Anchored = true
        local FloatValue = -3.1

        local function FloatPadLoop()
            if character:FindFirstChild(floatName) and character:FindFirstChild("HumanoidRootPart") then
                Float.CFrame = character.HumanoidRootPart.CFrame * CFrame.new(0, FloatValue, 0)
            else
                Float:Destroy()
            end
        end

        game:GetService("RunService").Heartbeat:Connect(FloatPadLoop)
        sendNotification("Platform", "Floating platform created under character.")
    end
end

local function respawnCharacter()
    spawnRemote:FireServer(1)
    wait(2)
    createFloatingPlatform()
end

local function hasQuest()
    local quest = questHolder:FindFirstChild("Quest")
    if quest and quest:FindFirstChild("QuestName") then
        local questName = quest.QuestName.ContentText
        return questName == targetQuestName
    end
    return false
end

local function isQuestCompleted()
    local questProgress = player.PlayerGui.GameUI.Quests.InformationFrame.ScrollingFrame:FindFirstChild("QuestPartProgress")
    return questProgress and questProgress:FindFirstChild("Progress") and questProgress.Progress.ContentText == "3/3"
end

local function equipPunchTool()
    local tool = player.Backpack:FindFirstChild(punchToolName)
    if tool then
        tool.Parent = player.Character
    end
end

local function takeQuest()
    player.Character:SetPrimaryPartCFrame(CFrame.new(teleportPosition))
    wait(1)
    fireproximityprompt(workspace.NPCs.Agor.ProximityPrompt)
    replicatedStorage.ClientRemotes.DialogueHandler:FireServer(1)
end

local function completeQuest()
    player.Character:SetPrimaryPartCFrame(CFrame.new(teleportPosition))
    wait(1)
    local prompt = workspace.NPCs.Agor:FindFirstChild("ProximityPrompt")
    if prompt then
        fireproximityprompt(prompt)
    end
    replicatedStorage.ClientRemotes.DialogueHandler:FireServer(1)
end

local function attackEnemy(enemy)
    equipPunchTool()
    local humanoid = enemy:FindFirstChild("Humanoid")
    while humanoid and humanoid.Health > 0 and isCharacterAlive() do
        local enemyPos = enemy.PrimaryPart.Position - enemy.PrimaryPart.CFrame.LookVector * 5
        player.Character:SetPrimaryPartCFrame(CFrame.new(enemyPos, enemy.PrimaryPart.Position))
        
        game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, true, nil, 0)
        wait(0.1)
        game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, false, nil, 0)
        
        wait(0.1)
    end
end

spawn(function()
    while true do
        if toggle and not isAttacking then
            if not isCharacterAlive() then
                respawnCharacter()
            elseif not hasQuest() then
                takeQuest()
            elseif isQuestCompleted() then
                completeQuest()
                wait(1)
            else
                equipPunchTool()
                for _, enemy in ipairs(aiCharacters:GetChildren()) do
                    if table.find(targetEnemies, enemy.Name) and enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 then
                        isAttacking = true
                        attackEnemy(enemy)
                        isAttacking = false
                        if isQuestCompleted() then
                            completeQuest()
                            break
                        end
                    end
                end
            end
        end
        wait(0.5)
    end
end)

game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessedEvent)
    if not gameProcessedEvent and input.KeyCode == Enum.KeyCode.P then
        toggle = not toggle
        sendNotification("Autofarm", "Autofarm " .. (toggle and "enabled" or "disabled"))
    end
end)
