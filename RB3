-- Services and Variables
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local StarterGui = game:GetService("StarterGui")
local HttpService = game:GetService("HttpService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer
local toggle = false
local questNPCPosition = Vector3.new(232, 3, -703)
local questName = "Defeat Strong Souls"
local questEnemies = {"Gravitron Soul", "Time Soul", "Light Soul"}
local punchToolName = "Katana"
local skillTools = {"Lion's Slash", "Conqueror's Field", "Nadeshiko Field"}
local webhookURL = "YOUR_DISCORD_WEBHOOK_URL"  -- Replace with your actual webhook URL
local autoClickPosition = Vector2.new(1095, 530)
local floatName = "FloatingPlatform"

-- Helper Functions
local function sendNotification(title, text)
    StarterGui:SetCore("SendNotification", {
        Title = title;
        Text = text;
        Duration = 2;
    })
end

local function sendDiscordNotification(status, details)
    local data = {
        ["username"] = "Quest Notifier",
        ["embeds"] = {{
            ["title"] = "**Quest Update: " .. status .. "**",
            ["description"] = details,
            ["color"] = status == "Quest Completed" and 65280 or 16711680,
            ["footer"] = {["text"] = "Roblox Quest Notifier"},
            ["timestamp"] = os.date("!%Y-%m-%dT%H:%M:%SZ")
        }}
    }
    local jsonData = HttpService:JSONEncode(data)
    pcall(function()
        syn.request({
            Url = webhookURL,
            Method = "POST",
            Headers = {["Content-Type"] = "application/json"},
            Body = jsonData
        })
    end)
end

-- Character Respawn & Platform
local function isCharacterAlive()
    return Workspace:FindFirstChild(LocalPlayer.Name) and Workspace[LocalPlayer.Name]:FindFirstChild("Customizations")
end

local function respawnCharacter()
    if not isCharacterAlive() then
        local args = {[1] = 1}
        ReplicatedStorage:WaitForChild("ClientRemotes"):WaitForChild("SpawnHandler"):FireServer(unpack(args))
        sendNotification("Respawn", "Character respawned.")
        wait(1)
        createFloatingPlatform()
    end
end

local function createFloatingPlatform()
    local character = LocalPlayer.Character
    if character and not character:FindFirstChild(floatName) then
        local Float = Instance.new('Part')
        Float.Name = floatName
        Float.Parent = character
        Float.Transparency = 1
        Float.Size = Vector3.new(2, 0.2, 1.5)
        Float.Anchored = true
        Float.CFrame = character.HumanoidRootPart.CFrame * CFrame.new(0, -3.1, 0)
    end
end

-- Quest Management
local function checkQuestStatus()
    local questHolder = LocalPlayer.PlayerGui.GameUI.Quests.QuestHolder
    local activeQuest = questHolder:FindFirstChild("Quest") and questHolder.Quest.QuestName.ContentText

    if activeQuest == questName then
        return "active"
    elseif activeQuest == nil then
        return "none"
    else
        return "other"
    end
end

local function handleQuestDialogue()
    local dialogueFrame = LocalPlayer.PlayerGui.GameUI.Dialogue.ScrollingFrame
    if dialogueFrame:FindFirstChild("ActiveQuest") then
        completeQuest()
    elseif dialogueFrame:FindFirstChild("AvailableQuest") then
        takeQuest()
    end
end

local function completeQuest()
    teleportToPosition(questNPCPosition)
    wait(0.5)
    local args = {[1] = 2}
    ReplicatedStorage.ClientRemotes.DialogueHandler:FireServer(unpack(args))
    wait(0.5)
    ReplicatedStorage.ClientRemotes.DialogueHandler:FireServer({1})
    wait(0.5)
    ReplicatedStorage.ClientRemotes.DialogueHandler:FireServer({1})
    sendNotification("Quest Status", "Quest completed.")
    sendDiscordNotification("Quest Completed", "Successfully completed the quest.")
end

local function takeQuest()
    teleportToPosition(questNPCPosition)
    wait(0.5)
    for i = 1, 4 do
        ReplicatedStorage.ClientRemotes.DialogueHandler:FireServer({1})
        wait(0.5)
    end
    sendNotification("Quest Status", "Quest taken.")
    sendDiscordNotification("Quest Retaken", "Successfully retaken the quest.")
end

-- Combat System
local function isQuestEnemy(name)
    for _, target in ipairs(questEnemies) do
        if name:find(target) then return true end
    end
    return false
end

local function attackEnemy(enemy)
    local katana = LocalPlayer.Backpack:FindFirstChild(punchToolName)
    if katana then katana.Parent = LocalPlayer.Character end
    repeat
        game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, true, game, 0)
        wait(0.5)
        game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, false, game, 0)
        if enemy.Humanoid.Health <= 0 then
            break
        end
    until not enemy or not isCharacterAlive()
end

local function engageEnemies()
    local aiCharacters = Workspace:WaitForChild("AiCharacters")
    for _, enemy in ipairs(aiCharacters:GetChildren()) do
        if isQuestEnemy(enemy.Name) then
            teleportToEnemy(enemy)
            attackEnemy(enemy)
        end
    end
end

-- Teleport and Utility Functions
local function teleportToPosition(position)
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        LocalPlayer.Character:SetPrimaryPartCFrame(CFrame.new(position))
    end
end

local function teleportToEnemy(enemy)
    if enemy and enemy:FindFirstChild("HumanoidRootPart") then
        teleportToPosition(enemy.HumanoidRootPart.Position + Vector3.new(0, 0, 7))
    end
end

-- Toggle System
UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
    if not gameProcessedEvent and input.KeyCode == Enum.KeyCode.T then
        toggle = not toggle
        sendNotification("Toggle", "Auto-farming " .. (toggle and "enabled" or "disabled"))
        if toggle then
            while toggle do
                respawnCharacter()
                if checkQuestStatus() == "none" then
                    takeQuest()
                elseif checkQuestStatus() == "active" then
                    engageEnemies()
                end
                wait(1)
            end
        end
    end
end)
