-- Autofarm Script by [Your Name]
-- Define toggle and set it initially to false
local toggle = false

-- Define the platform and character variables
local player = game.Players.LocalPlayer
local floatName = "FloatingPlatform"

-- Function to check if the character is dead and respawn if needed
local function checkAndRespawn()
    while toggle do
        if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
            -- Fire the spawn remote to respawn the character
            game:GetService("ReplicatedStorage"):WaitForChild("ClientRemotes"):WaitForChild("SpawnHandler"):FireServer(1)
        end
        wait(1)
    end
end

-- Function to create floating platform under character
local function createFloatingPlatform()
    local character = player.Character
    if character and not character:FindFirstChild(floatName) then
        local Float = Instance.new('Part')
        Float.Name = floatName
        Float.Parent = character
        Float.Transparency = 1
        Float.Size = Vector3.new(2, 0.2, 1.5)
        Float.Anchored = true
        local FloatValue = -3.1

        game:GetService("RunService").Heartbeat:Connect(function()
            if character:FindFirstChild(floatName) and character:FindFirstChild("HumanoidRootPart") then
                Float.CFrame = character.HumanoidRootPart.CFrame * CFrame.new(0, FloatValue, 0)
            else
                Float:Destroy()
            end
        end)
    end
end

-- Function to check quest status
local function checkQuestStatus()
    local questName = game:GetService("Players").LocalPlayer.PlayerGui.GameUI.Quests.QuestHolder.Quest.QuestName
    return questName and questName.ContentText == "Defeat Strong Souls"
end

-- Function to take or retake the quest
local function takeQuest()
    player.Character:SetPrimaryPartCFrame(CFrame.new(232, 3, -703))
    wait(0.5)
    fireproximityprompt(workspace.NPCs.Agor.ProximityPrompt)
end

-- Function to manage the quest dialogue and detect completion
local function handleQuestDialogue()
    local dialoguePath = game:GetService("Players").LocalPlayer.PlayerGui.GameUI.Dialogue.ScrollingFrame
    local activeQuest = dialoguePath:FindFirstChild("ActiveQuest")
    local availableQuest = dialoguePath:FindFirstChild("AvailableQuest")

    if activeQuest then
        -- Complete quest
        for i = 1, 3 do
            game:GetService("ReplicatedStorage"):WaitForChild("ClientRemotes"):WaitForChild("DialogueHandler"):FireServer(2)
            wait(0.5)
        end
    elseif availableQuest then
        -- Take or retake quest
        for i = 1, 4 do
            game:GetService("ReplicatedStorage"):WaitForChild("ClientRemotes"):WaitForChild("DialogueHandler"):FireServer(1)
            wait(0.5)
        end
    end
end

-- Function to send notification
local function sendNotification(title, text)
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = title;
        Text = text;
        Duration = 2;
    })
end

-- Function to teleport to enemies and perform actions
local function teleportAndAttackEnemies()
    local aiCharacters = workspace.AiCharacters:GetChildren()
    for _, enemy in ipairs(aiCharacters) do
        if string.match(enemy.Name, "Gravitron Soul") or string.match(enemy.Name, "Time Soul") or string.match(enemy.Name, "Light Soul") then
            local enemyPosition = enemy.HumanoidRootPart.Position
            player.Character:SetPrimaryPartCFrame(CFrame.new(enemyPosition + Vector3.new(0, 0, 7)))
            equipTool("Katana")
            while enemy.Parent and toggle do
                game:GetService("VirtualInputManager"):SendMouseButtonEvent(1095, 530, 0, true, game, 0)
                wait(0.5)
                game:GetService("VirtualInputManager"):SendMouseButtonEvent(1095, 530, 0, false, game, 0)
                -- Check for skills and cooldowns, activate them if ready
                wait(1)
            end
            unequipTool()
        end
    end
end

-- Function to equip tool
local function equipTool(toolName)
    local tool = player.Backpack:FindFirstChild(toolName)
    if tool then
        tool.Parent = player.Character
    end
end

-- Function to unequip all tools
local function unequipTool()
    for _, tool in ipairs(player.Character:GetChildren()) do
        if tool:IsA("Tool") then
            tool.Parent = player.Backpack
        end
    end
end

-- Function to send Discord notification on quest update
local function sendDiscordNotification(status, details)
    local data = {
        ["username"] = "Quest Notifier",
        ["embeds"] = {{
            ["title"] = "**Quest Update: " .. status .. "**",
            ["description"] = details,
            ["color"] = status == "Quest Completed" and 65280 or 16711680,
            ["footer"] = {
                ["text"] = "Roblox Quest Notifier",
            },
            ["timestamp"] = os.date("!%Y-%m-%dT%H:%M:%SZ")
        }}
    }
    local jsonData = game:GetService("HttpService"):JSONEncode(data)
    pcall(function()
        syn.request({
            Url = webhookURL,
            Method = "POST",
            Headers = { ["Content-Type"] = "application/json" },
            Body = jsonData
        })
    end)
end

-- Toggle the autofarm
game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessedEvent)
    if not gameProcessedEvent and input.KeyCode == Enum.KeyCode.T then
        toggle = not toggle
        sendNotification("Toggle", "Auto-farming " .. (toggle and "enabled" or "disabled"))
        if toggle then
            checkAndRespawn()
            createFloatingPlatform()
            if not checkQuestStatus() then
                takeQuest()
            end
            handleQuestDialogue()
            teleportAndAttackEnemies()
        end
    end
end)
