local player = game:GetService("Players").LocalPlayer
local replicatedStorage = game:GetService("ReplicatedStorage")
local workspace = game:GetService("Workspace")
local spawnRemote = replicatedStorage:WaitForChild("ClientRemotes"):WaitForChild("SpawnHandler")
local aiCharacters = workspace:WaitForChild("AiCharacters")
local questHolder = player.PlayerGui.GameUI.Quests.QuestHolder
local targetQuestName = "Defeat Strong Souls"
local targetEnemies = {"Gravitron Soul", "Time Soul", "Light Soul"}
local punchToolName = "Katana"
local teleportPosition = Vector3.new(232, 3, -703)
local autoClickPosition = Vector2.new(903, 478)
local floatName = "FloatingPlatform"
local StarterGui = game:GetService("StarterGui")
local toggle = false

local isQuestActive = false
local isQuestCompletedFlag = false
local isTargetingEnemy = false
local isCharacterAliveFlag = false
local HealthFlag = true

local skills = {"Lion's Slash", "Raijin Slash", "Nadeshiko Field"} -- Skill names
local skillCooldown = 15 -- Delay before reusing skills
local nadeshikoCooldown = 25 -- Delay for Nadeshiko Field

local function sendNotification(title, text)
    StarterGui:SetCore("SendNotification", {
        Title = title;
        Text = text;
        Duration = 5;
    })
end

local function isCharacterAlive()
    local character = workspace:FindFirstChild("Venqtrix")
    if character and character:FindFirstChild("Customizations") then
        isCharacterAliveFlag = true
    else
        isCharacterAliveFlag = false
    end
    return isCharacterAliveFlag
end

local function equipPunchTool()
    local tool = player.Backpack:FindFirstChild(punchToolName)
    if tool then
        tool.Parent = player.Character
    end
end

local function equipTool(toolName)
    local tool = player.Backpack:FindFirstChild(toolName)
    if tool then
        tool.Parent = player.Character
        return true
    end
    return false
end

local function autoClick()
    game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, true, nil, 0)
    wait(0.1)
    game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, false, nil, 0)
end

local function useSkills()
    for _, skill in ipairs(skills) do
        if equipTool(skill) then
            if skill == "Nadeshiko Field" then
                -- Special handling for Nadeshiko Field with a hold click
                game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, true, nil, 0)
                wait(10) -- Hold for 10 seconds
                game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, false, nil, 0)
                wait(25) -- Wait 25 seconds before reusing Nadeshiko Field
            else
                autoClick()
                wait(0.5) -- Delay between skill activations
            end
        end
    end
end

-- Main loop to handle skills and punching
spawn(function()
    while true do
        if toggle then
            wait(1)
            
            if not isCharacterAlive() then
                HealthFlag = false
                respawnCharacter()
                wait(2)
            else
                HealthFlag = true
            end
            
            if HealthFlag then
                equipPunchTool()

                -- Quest handling code omitted for brevity...

                if hasQuest() then
                    for _, enemy in ipairs(aiCharacters:GetChildren()) do
                        if isCharacterAlive() and HealthFlag and enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 then
                            for _, targetName in ipairs(targetEnemies) do
                                if enemy.Name:find(targetName) then
                                    attackEnemy(enemy)
                                    wait(0.5)
                                    if isQuestCompleted() then
                                        completeQuest()
                                        takeQuest()
                                        break
                                    end
                                end
                            end
                        end
                    end
                end
                
                -- Use skills every 15 seconds, then default to punch
                useSkills()
                wait(skillCooldown)
                equipPunchTool()
                autoClick()
                wait(skillCooldown)
            end
        else
            wait(0.1)
        end
    end
end)

game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessedEvent)
    if not gameProcessedEvent and input.KeyCode == Enum.KeyCode.P then
        toggle = not toggle
        local status = toggle and "enabled" or "disabled"
        sendNotification("Autofarm", "Autofarm " .. status)
    end
end)
