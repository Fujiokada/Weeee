local player = game:GetService("Players").LocalPlayer
local replicatedStorage = game:GetService("ReplicatedStorage")
local workspace = game:GetService("Workspace")
local spawnRemote = replicatedStorage:WaitForChild("ClientRemotes"):WaitForChild("SpawnHandler")
local aiCharacters = workspace:WaitForChild("AiCharacters")
local questHolder = player.PlayerGui.GameUI.Quests.QuestHolder
local targetQuestName = "Defeat Strong Souls"
local targetEnemies = {"Gravitron Soul", "Time Soul", "Light Soul"}
local punchToolName = "Katana"
local skillNames = {"Lion's Slash", "Raijin Slash", "Nadeshiko Field"}
local teleportPosition = Vector3.new(232, 3, -703)
local autoClickPosition = Vector2.new(903, 478)
local floatName = "FloatingPlatform"
local StarterGui = game:GetService("StarterGui")
local toggle = false

local skillFlags = {["Lion's Slash"] = false, ["Raijin Slash"] = false, ["Nadeshiko Field"] = false}
local lastSkillUse = 0
local isCharacterAliveFlag = false
local HealthFlag = true

local function sendNotification(title, text)
    StarterGui:SetCore("SendNotification", {
        Title = title;
        Text = text;
        Duration = 5;
    })
end

local function isCharacterAlive()
    local character = workspace:FindFirstChild("Venqtrix")
    if character and character:FindFirstChild("Customizations") then
        isCharacterAliveFlag = true
    else
        isCharacterAliveFlag = false
    end
    return isCharacterAliveFlag
end

local function createFloatingPlatform()
    local character = player.Character
    if character and not character:FindFirstChild(floatName) then
        local Float = Instance.new('Part')
        Float.Name = floatName
        Float.Parent = character
        Float.Transparency = 1
        Float.Size = Vector3.new(2, 0.2, 1.5)
        Float.Anchored = true
        local FloatValue = -3.1

        local function FloatPadLoop()
            if character:FindFirstChild(floatName) and character:FindFirstChild("HumanoidRootPart") then
                Float.CFrame = character.HumanoidRootPart.CFrame * CFrame.new(0, FloatValue, 0)
            else
                Float:Destroy()
            end
            wait(0.2)
        end

        game:GetService("RunService").Heartbeat:Connect(FloatPadLoop)
        sendNotification("Platform", "Floating platform created under character.")
    end
end

local function respawnCharacter()
    if not isCharacterAlive() then
        sendNotification("Character Status", "Character is dead, respawning in 2 seconds...")
        wait(2)
        spawnRemote:FireServer(1)
        wait(2)
        createFloatingPlatform()
        sendNotification("Character Status", "Character respawned successfully.")
    else
        sendNotification("Character Status", "Character is still alive, no respawn needed.")
    end
end

local function hasQuest()
    if questHolder:FindFirstChild("Quest") and questHolder.Quest:FindFirstChild("QuestName") then
        local questName = questHolder.Quest.QuestName.ContentText
        sendNotification("Quest Status", "Currently active quest: " .. questName)
        return questName == targetQuestName
    else
        sendNotification("Quest Status", "No active quest found in QuestHolder.")
    end
    return false
end

local function isQuestCompleted()
    local questProgressPath = player.PlayerGui.GameUI.Quests.InformationFrame.ScrollingFrame:FindFirstChild("QuestPartProgress")
    if questProgressPath and questProgressPath:FindFirstChild("Progress") then
        sendNotification("Quest Progress", "Quest progress: " .. questProgressPath.Progress.ContentText)
        return questProgressPath.Progress.ContentText == "3/3"
    else
        sendNotification("Quest Progress", "Quest progress path or progress not found.")
    end
    return false
end

local function equipTool(toolName)
    local tool = player.Backpack:FindFirstChild(toolName)
    if tool then
        tool.Parent = player.Character
    end
end

local function unequipTool()
    local character = player.Character
    for _, tool in ipairs(character:GetChildren()) do
        if tool:IsA("Tool") then
            tool.Parent = player.Backpack
        end
    end
end

local function activateSkill(skillName)
    equipTool(skillName)
    wait(1)

    if skillName == "Nadeshiko Field" then
        game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, true, nil, 0)
        wait(10)  -- Hold Nadeshiko Field for 10 seconds
        game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, false, nil, 0)
    else
        game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, true, nil, 0)
        wait(0.1)
        game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, false, nil, 0)
    end

    unequipTool()
    wait(1)
end

local function useSkills()
    local currentTime = tick()
    if currentTime - lastSkillUse >= 15 then
        lastSkillUse = currentTime

        for _, skillName in ipairs(skillNames) do
            if not skillFlags[skillName] then
                activateSkill(skillName)
                skillFlags[skillName] = true
            end
        end

        wait(25)  -- Cooldown for Nadeshiko Field
        skillFlags = {["Lion's Slash"] = false, ["Raijin Slash"] = false, ["Nadeshiko Field"] = false}
    end
end

local function attackEnemy(enemy)
    sendNotification("Combat", "Attacking enemy: " .. enemy.Name)
    while enemy.Parent and enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 and isCharacterAlive() and HealthFlag do
        local enemyPos = enemy.PrimaryPart.Position - enemy.PrimaryPart.CFrame.LookVector * 5
        player.Character:SetPrimaryPartCFrame(CFrame.new(enemyPos, enemy.PrimaryPart.Position))

        useSkills()
        equipTool(punchToolName)

        game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, true, nil, 0)
        wait(0.1)
        game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, false, nil, 0)

        wait(0.2)
    end
    wait(0.5)
end

spawn(function()
    while true do
        if toggle then
            wait(1)

            if not isCharacterAlive() then
                HealthFlag = false
                respawnCharacter()
                wait(2)
            else
                HealthFlag = true
            end

            if HealthFlag then
                equipTool(punchToolName)

                if not hasQuest() then
                    sendNotification("Quest", "Quest not active. Attempting to take quest.")
                    takeQuest()
                    wait(3)
                end

                if hasQuest() and isQuestCompleted() then
                    sendNotification("Quest", "Quest completed. Attempting to complete quest dialogue.")
                    completeQuest()
                    wait(3)
                    takeQuest()
                    wait(3)
                end

                if hasQuest() then
                    for _, enemy in ipairs(aiCharacters:GetChildren()) do
                        if isCharacterAlive() and HealthFlag and enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 then
                            for _, targetName in ipairs(targetEnemies) do
                                if enemy.Name:find(targetName) then
                                    attackEnemy(enemy)
                                    wait(0.5)
                                    if isQuestCompleted() then
                                        completeQuest()
                                        takeQuest()
                                        break
                                    end
                                end
                            end
                        end
                    end
                end
            end
        else
            wait(0.1)
        end
    end
end)

game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessedEvent)
    if not gameProcessedEvent and input.KeyCode == Enum.KeyCode.P then
        toggle = not toggle
        local status = toggle and "enabled" or "disabled"
        sendNotification("Autofarm", "Autofarm " .. status)
    end
end)
