local player = game:GetService("Players").LocalPlayer
local replicatedStorage = game:GetService("ReplicatedStorage")
local workspace = game:GetService("Workspace")
local spawnRemote = replicatedStorage:WaitForChild("ClientRemotes"):WaitForChild("SpawnHandler")
local aiCharacters = workspace:WaitForChild("AiCharacters")
local questHolder = player.PlayerGui.GameUI.Quests.QuestHolder
local targetQuestName = "Defeat Strong Souls"
local targetEnemies = {"Gravitron Soul", "Time Soul", "Light Soul"}
local punchToolName = "Katana"
local skillNames = {"Lion's Slash", "Nadeshiko Field"}
local teleportPosition = Vector3.new(232, 3, -703)
local questNPCPosition = Vector3.new(232, 3, -703)
local autoClickPosition = Vector2.new(903, 478)
local floatName = "FloatingPlatform"
local StarterGui = game:GetService("StarterGui")
local toggle = false

local lastSkillUse = 0
local isCharacterAliveFlag = false
local HealthFlag = true

local function sendNotification(title, text)
    StarterGui:SetCore("SendNotification", {
        Title = title;
        Text = text;
        Duration = 2;
    })
end

local function isCharacterAlive()
    local character = workspace:FindFirstChild("Venqtrix")
    isCharacterAliveFlag = character and character:FindFirstChild("Customizations") ~= nil
    return isCharacterAliveFlag
end

local function createFloatingPlatform()
    local character = player.Character
    if character and not character:FindFirstChild(floatName) then
        local Float = Instance.new('Part')
        Float.Name = floatName
        Float.Parent = character
        Float.Transparency = 1
        Float.Size = Vector3.new(2, 0.2, 1.5)
        Float.Anchored = true
        local FloatValue = -3.1

        local function FloatPadLoop()
            if character:FindFirstChild(floatName) and character:FindFirstChild("HumanoidRootPart") then
                Float.CFrame = character.HumanoidRootPart.CFrame * CFrame.new(0, FloatValue, 0)
            else
                Float:Destroy()
            end
            wait(0.2)
        end

        game:GetService("RunService").Heartbeat:Connect(FloatPadLoop)
        sendNotification("Platform", "Floating platform created under character.")
    end
end

local function simulateHoldClick(duration)
    local VirtualInputManager = game:GetService("VirtualInputManager")
    VirtualInputManager:SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, true, game, 0)
    wait(duration)
    VirtualInputManager:SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, false, game, 0)
end

local function equipTool(toolName)
    local tool = player.Backpack:FindFirstChild(toolName)
    if tool then
        tool.Parent = player.Character
    end
end

local function unequipTool()
    local character = player.Character
    for _, tool in ipairs(character:GetChildren()) do
        if tool:IsA("Tool") then
            tool.Parent = player.Backpack
        end
    end
end

-- Function to check if Nadeshiko Field is active
local function isNadeshikoFieldActive()
    return workspace.debrisHolder:FindFirstChild("NadeshikoField") ~= nil
end

-- Check if Nadeshiko Field is on cooldown by verifying tool availability or cooldown indicator
local function isNadeshikoOnCooldown()
    local tool = player.Backpack:FindFirstChild("Nadeshiko Field") or player.Character:FindFirstChild("Nadeshiko Field")
    if tool and tool:FindFirstChild("Cooldown") then
        local cooldownValue = tonumber(tool.Cooldown.Value)
        return cooldownValue and cooldownValue > 0
    end
    return false
end

-- Find enemies in range of Nadeshiko Field
local function getEnemiesInField()
    local field = workspace.debrisHolder:FindFirstChild("NadeshikoField")
    if not field then return {} end

    local enemiesInField = {}
    for _, enemy in ipairs(aiCharacters:GetChildren()) do
        if enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 then
            local distance = (enemy.PrimaryPart.Position - field.Position).magnitude
            if distance <= 106 then  -- Half of field's size for radius check
                table.insert(enemiesInField, enemy)
            end
        end
    end
    return enemiesInField
end

-- Activate Nadeshiko Field based on enemy status
local function activateNadeshikoField()
    local nadeshikoTool = player.Backpack:FindFirstChild("Nadeshiko Field")
    if not nadeshikoTool then return end

    equipTool("Nadeshiko Field")
    local isClickHeld = false

    while not isNadeshikoOnCooldown() do
        local enemiesInField = getEnemiesInField()
        
        if #enemiesInField == 0 then
            if isClickHeld then
                game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, false, game, 0)
                isClickHeld = false
            end
            break
        end

        if not isClickHeld then
            game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, true, game, 0)
            isClickHeld = true
        end

        wait(0.1)
    end

    if isClickHeld then
        game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, false, game, 0)
    end

    equipTool(punchToolName)
    lastSkillUse = tick()
end

-- Activate skills and hold Nadeshiko Field if needed
local function activateSkills()
    unequipTool()

    -- Activate "Lion's Slash"
    local lionSlashTool = player.Backpack:FindFirstChild("Lion's Slash")
    if lionSlashTool then
        equipTool("Lion's Slash")
        for _ = 1, 3 do
            game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, true, game, 0)
            wait(0.1)
            game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, false, game, 0)
        end
        wait(1)
        unequipTool()
    end

    -- Activate "Nadeshiko Field" if it's not on cooldown
    activateNadeshikoField()
end

local function completeQuest()
    while isNadeshikoFieldActive() do
        wait(0.5)
    end
    sendNotification("Quest", "Teleporting to quest NPC to complete quest...")
    teleportToPositionIfNadeshikoInactive(questNPCPosition)
    wait(1)

    local npc = workspace.NPCs:FindFirstChild("Agor")
    if npc then
        local prompt = npc:FindFirstChild("ProximityPrompt")
        if prompt then
            fireproximityprompt(prompt)
            for i = 1, 2 do
                if replicatedStorage.ClientRemotes:FindFirstChild("DialogueHandler") then
                    replicatedStorage.ClientRemotes.DialogueHandler:FireServer(2)
                    wait(1)
                else
                    sendNotification("Error", "DialogueHandler not found!")
                    return
                end
            end
            replicatedStorage.ClientRemotes.DialogueHandler:FireServer(1)
            wait(1)
            replicatedStorage.ClientRemotes.DialogueHandler:FireServer(1)
            sendNotification("Quest", "Quest completed successfully.")
        else
            sendNotification("Error", "Proximity prompt for NPC not found!")
        end
    else
        sendNotification("Error", "Quest NPC not found in workspace!")
    end
end

-- Update quest retake function to wait for Nadeshiko Field to finish
local function takeQuest()
    while isNadeshikoFieldActive() do
        wait(0.5)
    end
    sendNotification("Quest", "Attempting to retake quest...")
    teleportToPositionIfNadeshikoInactive(teleportPosition)
    wait(1)

    local npc = workspace.NPCs:FindFirstChild("Agor")
    if npc then
        local prompt = npc:FindFirstChild("ProximityPrompt")
        if prompt then
            fireproximityprompt(prompt)
            for _ = 1, 4 do
                if replicatedStorage.ClientRemotes:FindFirstChild("DialogueHandler") then
                    replicatedStorage.ClientRemotes.DialogueHandler:FireServer(1)
                else
                    sendNotification("Error", "DialogueHandler not found!")
                    return
                end
                wait(1)
            end
            sendNotification("Quest", "Quest successfully retaken.")
        else
            sendNotification("Error", "Proximity prompt for NPC not found!")
        end
    else
        sendNotification("Error", "Quest NPC not found in workspace!")
    end
end

local function respawnCharacter()
    if not isCharacterAlive() then
        sendNotification("Character Status", "Character is dead, respawning in 2 seconds...")
        wait(2)
        spawnRemote:FireServer(1)
        wait(2)
        createFloatingPlatform()
        sendNotification("Character Status", "Character respawned successfully.")
    end
end

local function hasQuest()
    -- Check if the player currently has the target quest
    local quest = questHolder:FindFirstChild("Quest")
    if quest and quest:FindFirstChild("QuestName") then
        return quest.QuestName.ContentText == targetQuestName
    end
    return false
end

local function isQuestCompleted()
    -- Check if the quest progress indicates completion (3/3)
    local questProgress = player.PlayerGui.GameUI.Quests.InformationFrame.ScrollingFrame:FindFirstChild("QuestPartProgress")
    return questProgress and questProgress.Progress.ContentText == "3/3"
end

-- Updated attackEnemy to call activateNadeshikoField based on the current enemy
local function attackEnemy(enemy)
    sendNotification("Combat", "Attacking enemy: " .. enemy.Name)

    while enemy.Parent and enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 and isCharacterAlive() and HealthFlag do
        local enemyPos = enemy.PrimaryPart.Position - enemy.PrimaryPart.CFrame.LookVector * 7
        player.Character:SetPrimaryPartCFrame(CFrame.new(enemyPos, enemy.PrimaryPart.Position))

        if tick() - lastSkillUse > 5 then
            activateSkills()
        end

        equipTool(punchToolName)
        game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, true, game, 0)
        wait(0.1)
        game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, false, game, 0)
        wait(0.1)
    end
end

-- Main loop with additional Nadeshiko Field checks
spawn(function()
    while true do
        if toggle then
            -- Check if character is alive and needs to respawn
            if not isCharacterAlive() then
                HealthFlag = false
                respawnCharacter()
            else
                HealthFlag = true
            end

            if HealthFlag then
                -- If no active quest, start or retake the quest
                if not hasQuest() and not isNadeshikoFieldActive() then
                    sendNotification("Quest", "No active quest, attempting to start quest.")
                    takeQuest()
                    wait(1)
                end

                -- If quest is completed, turn it in and retake it
                if hasQuest() and isQuestCompleted() and not isNadeshikoFieldActive() then
                    sendNotification("Quest", "Quest completed, turning in.")
                    completeQuest()
                    wait(1)
                    takeQuest() -- Retake quest immediately after completion
                    wait(1)
                end

                -- Find and attack target enemies if the quest is active and Nadeshiko Field isn't up
                if hasQuest() and not isQuestCompleted() and not isNadeshikoFieldActive() then
                    for _, enemy in ipairs(aiCharacters:GetChildren()) do
                        if isCharacterAlive() and HealthFlag and enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 then
                            for _, targetName in ipairs(targetEnemies) do
                                if enemy.Name:find(targetName) then
                                    attackEnemy(enemy)
                                    -- Check quest completion status after each enemy
                                    if isQuestCompleted() then
                                        completeQuest()
                                        takeQuest()
                                        break
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
        wait(0.1)
    end
end)

game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessedEvent)
    if not gameProcessedEvent then
        if input.KeyCode == Enum.KeyCode.T then
            toggle = not toggle
            sendNotification("Toggle", "Auto-farming " .. (toggle and "enabled" or "disabled"))
        end
    end
end)
