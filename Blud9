local player = game:GetService("Players").LocalPlayer
local replicatedStorage = game:GetService("ReplicatedStorage")
local workspace = game:GetService("Workspace")
local spawnRemote = replicatedStorage:WaitForChild("ClientRemotes"):WaitForChild("SpawnHandler")
local aiCharacters = workspace:WaitForChild("AiCharacters")
local questHolder = player.PlayerGui.GameUI.Quests.QuestHolder
local targetQuestName = "Defeat Strong Souls"
local targetEnemies = {"Gravitron Soul", "Time Soul", "Light Soul"}
local punchToolName = "Katana"
local skillNames = {"Lion's Slash", "Nadeshiko Field"}
local teleportPosition = Vector3.new(232, 3, -703)
local questNPCPosition = Vector3.new(232, 3, -703)
local autoClickPosition = Vector2.new(903, 478)
local floatName = "FloatingPlatform"
local StarterGui = game:GetService("StarterGui")
local toggle = false

local lastSkillUse = 0
local isCharacterAliveFlag = false
local HealthFlag = true

local function sendNotification(title, text)
    StarterGui:SetCore("SendNotification", {
        Title = title;
        Text = text;
        Duration = 2;
    })
end

local function isCharacterAlive()
    local character = workspace:FindFirstChild("Venqtrix")
    isCharacterAliveFlag = character and character:FindFirstChild("Customizations") ~= nil
    return isCharacterAliveFlag
end

local function createFloatingPlatform()
    local character = player.Character
    if character and not character:FindFirstChild(floatName) then
        local Float = Instance.new('Part')
        Float.Name = floatName
        Float.Parent = character
        Float.Transparency = 1
        Float.Size = Vector3.new(2, 0.2, 1.5)
        Float.Anchored = true
        local FloatValue = -3.1

        local function FloatPadLoop()
            if character:FindFirstChild(floatName) and character:FindFirstChild("HumanoidRootPart") then
                Float.CFrame = character.HumanoidRootPart.CFrame * CFrame.new(0, FloatValue, 0)
            else
                Float:Destroy()
            end
            wait(0.2)
        end

        game:GetService("RunService").Heartbeat:Connect(FloatPadLoop)
        sendNotification("Platform", "Floating platform created under character.")
    end
end

local function simulateHoldClick(duration)
    local VirtualInputManager = game:GetService("VirtualInputManager")
    VirtualInputManager:SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, true, game, 0)
    wait(duration)
    VirtualInputManager:SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, false, game, 0)
end

local function equipTool(toolName)
    local tool = player.Backpack:FindFirstChild(toolName)
    if tool then
        tool.Parent = player.Character
    end
end

local function unequipTool()
    local character = player.Character
    for _, tool in ipairs(character:GetChildren()) do
        if tool:IsA("Tool") then
            tool.Parent = player.Backpack
        end
    end
end

-- Function to check if Nadeshiko Field is active
local function isNadeshikoFieldActive()
    return workspace.debrisHolder:FindFirstChild("NadeshikoField") ~= nil
end

-- Function to check if Nadeshiko Field is on cooldown
local function isNadeshikoFieldOnCooldown()
    local nadeshikoTool = player.Backpack:FindFirstChild("Nadeshiko Field")
    return nadeshikoTool and tonumber(nadeshikoTool.Name:match("%d+")) ~= nil
end

-- Check if enemy is within Nadeshiko Field area
local function isEnemyWithinField(enemy)
    local field = workspace.debrisHolder:FindFirstChild("NadeshikoField")
    if field and enemy.PrimaryPart then
        local fieldSize = Vector3.new(212, 212, 212)
        local distance = (field.Position - enemy.PrimaryPart.Position).magnitude
        return distance <= fieldSize.magnitude / 2
    end
    return false
end

-- Function to hold Nadeshiko Field until enemies are dead or cooldown starts
local function holdNadeshikoField()
    local nadeshikoTool = player.Backpack:FindFirstChild("Nadeshiko Field")
    if nadeshikoTool and not isNadeshikoFieldOnCooldown() then
        equipTool("Nadeshiko Field")
        
        -- Continuously hold activation until enemies in field are dead or cooldown starts
        while not isNadeshikoFieldOnCooldown() do
            local enemiesInField = {}
            
            for _, enemy in ipairs(aiCharacters:GetChildren()) do
                if enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 and isEnemyWithinField(enemy) then
                    table.insert(enemiesInField, enemy)
                end
            end
            
            if #enemiesInField == 0 then
                break -- All enemies in the field are dead, stop holding the skill
            end
            
            simulateHoldClick(0.1) -- Hold click in short intervals to re-check cooldown and field status
            wait(0.1)
        end
        
        unequipTool() -- Release Nadeshiko Field after holding
    end
end

-- Updated activateSkills function to include health check for Nadeshiko Field
local function activateSkills(currentEnemy)
    -- Hold Nadeshiko Field if it should be activated
    if currentEnemy and currentEnemy:FindFirstChild("Humanoid") and currentEnemy.Humanoid.Health > 30 and not isNadeshikoFieldActive() then
        holdNadeshikoField()
    end

    -- Activate "Lion's Slash" skill
    local lionSlashTool = player.Backpack:FindFirstChild("Lion's Slash")
    if lionSlashTool then
        equipTool("Lion's Slash")
        for _ = 1, 3 do
            game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, true, game, 0)
            wait(0.1)
            game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, false, game, 0)
        end
        wait(1)
        unequipTool()
    end

    equipTool(punchToolName)
    lastSkillUse = tick()
end

-- Additional check for teleport prevention when Nadeshiko Field is active
local function teleportToPositionIfNadeshikoInactive(position)
    if not isNadeshikoFieldActive() then
        player.Character:SetPrimaryPartCFrame(CFrame.new(position))
    else
        sendNotification("Teleport", "Teleportation blocked due to Nadeshiko Field.")
    end
end

local function completeQuest()
    while isNadeshikoFieldActive() do
        wait(0.5)
    end
    sendNotification("Quest", "Teleporting to quest NPC to complete quest...")
    teleportToPositionIfNadeshikoInactive(questNPCPosition)
    wait(1)

    local npc = workspace.NPCs:FindFirstChild("Agor")
    if npc then
        local prompt = npc:FindFirstChild("ProximityPrompt")
        if prompt then
            fireproximityprompt(prompt)
            for i = 1, 2 do
                if replicatedStorage.ClientRemotes:FindFirstChild("DialogueHandler") then
                    replicatedStorage.ClientRemotes.DialogueHandler:FireServer(2)
                    wait(1)
                else
                    sendNotification("Error", "DialogueHandler not found!")
                    return
                end
            end
            replicatedStorage.ClientRemotes.DialogueHandler:FireServer(1)
            wait(1)
            replicatedStorage.ClientRemotes.DialogueHandler:FireServer(1)
            sendNotification("Quest", "Quest completed successfully.")
        else
            sendNotification("Error", "Proximity prompt for NPC not found!")
        end
    else
        sendNotification("Error", "Quest NPC not found in workspace!")
    end
end

-- Update quest retake function to wait for Nadeshiko Field to finish
local function takeQuest()
    while isNadeshikoFieldActive() do
        wait(0.5)
    end
    sendNotification("Quest", "Attempting to retake quest...")
    teleportToPositionIfNadeshikoInactive(teleportPosition)
    wait(1)

    local npc = workspace.NPCs:FindFirstChild("Agor")
    if npc then
        local prompt = npc:FindFirstChild("ProximityPrompt")
        if prompt then
            fireproximityprompt(prompt)
            for _ = 1, 4 do
                if replicatedStorage.ClientRemotes:FindFirstChild("DialogueHandler") then
                    replicatedStorage.ClientRemotes.DialogueHandler:FireServer(1)
                else
                    sendNotification("Error", "DialogueHandler not found!")
                    return
                end
                wait(1)
            end
            sendNotification("Quest", "Quest successfully retaken.")
        else
            sendNotification("Error", "Proximity prompt for NPC not found!")
        end
    else
        sendNotification("Error", "Quest NPC not found in workspace!")
    end
end

local function respawnCharacter()
    if not isCharacterAlive() then
        sendNotification("Character Status", "Character is dead, respawning in 2 seconds...")
        wait(2)
        spawnRemote:FireServer(1)
        wait(2)
        createFloatingPlatform()
        sendNotification("Character Status", "Character respawned successfully.")
    end
end

local function hasQuest()
    -- Check if the player currently has the target quest
    local quest = questHolder:FindFirstChild("Quest")
    if quest and quest:FindFirstChild("QuestName") then
        return quest.QuestName.ContentText == targetQuestName
    end
    return false
end

local function isQuestCompleted()
    -- Check if the quest progress indicates completion (3/3)
    local questProgress = player.PlayerGui.GameUI.Quests.InformationFrame.ScrollingFrame:FindFirstChild("QuestPartProgress")
    return questProgress and questProgress.Progress.ContentText == "3/3"
end

-- Updated attackEnemy function to pass the enemy to activateSkills for health check
local function attackEnemy(enemy)
    sendNotification("Combat", "Attacking enemy: " .. enemy.Name)

    -- Exit combat if Nadeshiko Field becomes active
    while enemy.Parent and enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 and isCharacterAlive() and HealthFlag and not isNadeshikoFieldActive() do
        local enemyPos = enemy.PrimaryPart.Position - enemy.PrimaryPart.CFrame.LookVector * 7
        player.Character:SetPrimaryPartCFrame(CFrame.new(enemyPos, enemy.PrimaryPart.Position))

        -- Use skills after teleporting to each new enemy, pass enemy for health check
        if tick() - lastSkillUse > 5 then
            activateSkills(enemy)  -- Pass the enemy to check its health for Nadeshiko Field
        end

        equipTool(punchToolName)
        game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, true, game, 0)
        wait(0.1)
        game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, false, game, 0)
        wait(0.1)
    end

    -- Stop combat if Nadeshiko Field activates
    if isNadeshikoFieldActive() then
        sendNotification("Combat", "Combat paused due to Nadeshiko Field activation.")
    end
end

-- Main loop with additional Nadeshiko Field checks
spawn(function()
    while true do
        if toggle then
            -- Check if character is alive and needs to respawn
            if not isCharacterAlive() then
                HealthFlag = false
                respawnCharacter()
            else
                HealthFlag = true
            end

            if HealthFlag then
                -- If no active quest, start or retake the quest
                if not hasQuest() and not isNadeshikoFieldActive() then
                    sendNotification("Quest", "No active quest, attempting to start quest.")
                    takeQuest()
                    wait(1)
                end

                -- If quest is completed, turn it in and retake it
                if hasQuest() and isQuestCompleted() and not isNadeshikoFieldActive() then
                    sendNotification("Quest", "Quest completed, turning in.")
                    completeQuest()
                    wait(1)
                    takeQuest() -- Retake quest immediately after completion
                    wait(1)
                end

                -- Find and attack target enemies if the quest is active and Nadeshiko Field isn't up
                if hasQuest() and not isQuestCompleted() and not isNadeshikoFieldActive() then
                    for _, enemy in ipairs(aiCharacters:GetChildren()) do
                        if isCharacterAlive() and HealthFlag and enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 then
                            for _, targetName in ipairs(targetEnemies) do
                                if enemy.Name:find(targetName) then
                                    attackEnemy(enemy)
                                    -- Check quest completion status after each enemy
                                    if isQuestCompleted() then
                                        completeQuest()
                                        takeQuest()
                                        break
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
        wait(0.1)
    end
end)

game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessedEvent)
    if not gameProcessedEvent then
        if input.KeyCode == Enum.KeyCode.T then
            toggle = not toggle
            sendNotification("Toggle", "Auto-farming " .. (toggle and "enabled" or "disabled"))
        end
    end
end)
