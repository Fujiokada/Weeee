local player = game:GetService("Players").LocalPlayer
local replicatedStorage = game:GetService("ReplicatedStorage")
local StarterGui = game:GetService("StarterGui")
local HttpService = game:GetService("HttpService")

local raceCheckPath = player.PlayerGui.GameUI.SlotFrame.CurrentRaceSlotFrame.CurrentElement.ID
local spinRemote = replicatedStorage:WaitForChild("ClientRemotes"):WaitForChild("RaceSpinHandler")
local webhookURL = "https://discord.com/api/webhooks/1306244225725370471/wFVYW4SdmUMhvPOxqTY0VncLWLEtArsrGs3lnzSu38aKpHdlP84FD6IbcWCgqJ5Z1wyS"

-- Whitelisted races
local whitelistRaces = {
    ["Ascended"] = true,
    ["Arch"] = true,
    ["Chtharim"] = true,
    ["Darkarch"] = true,
    ["Descended"] = true,
    ["Divinari"] = true,
    ["Oni"] = true,
    ["Starborn"] = true,
    ["Seer"] = true,
    ["Commander"] = true
}

-- Function to send in-game notification
local function sendNotification(title, text)
    StarterGui:SetCore("SendNotification", {
        Title = title;
        Text = text;
        Duration = 2;
    })
end

-- Function to send Discord notification when a whitelisted race is rolled
local function sendDiscordNotification(race)
    local data = {
        ["username"] = "Race Spinner",
        ["embeds"] = {{
            ["title"] = "**Whitelisted Race Obtained!**",
            ["description"] = "Rolled race: " .. race,
            ["color"] = 65280,  -- Green color
            ["footer"] = {
                ["text"] = "Roblox Race Spinner",
            },
            ["timestamp"] = os.date("!%Y-%m-%dT%H:%M:%SZ")  -- UTC time
        }}
    }

    local jsonData = HttpService:JSONEncode(data)

    pcall(function()
        syn.request({
            Url = webhookURL,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = jsonData
        })
    end)
end

-- Main spinning function
local function autoSpin()
    while true do
        -- Fire the spin remote to roll for a new race
        spinRemote:FireServer()

        -- Wait for the raceCheckPath to exist, as it may be refreshed or replaced after each spin
        repeat
            wait(0.1)
        until raceCheckPath:FindFirstChild("ContextName") ~= nil

        -- Get the rolled race name
        local currentRace = raceCheckPath.ContextName.Text

        -- Check if the current race is in the whitelist
        if whitelistRaces[currentRace] then
            sendNotification("Auto Spinner", "Obtained whitelisted race: " .. currentRace)
            sendDiscordNotification(currentRace)
            break  -- Stop spinning as we obtained a whitelisted race
        else
            sendNotification("Auto Spinner", "Rolled race: " .. currentRace .. " (Not whitelisted)")
        end

        wait(0.5)  -- Slight delay before the next spin
    end
end

-- Start the auto spinner
autoSpin()
