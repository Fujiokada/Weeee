-- Initialize paths and settings
local player = game:GetService("Players").LocalPlayer
local replicatedStorage = game:GetService("ReplicatedStorage")
local workspace = game:GetService("Workspace")
local spawnRemote = replicatedStorage:WaitForChild("ClientRemotes"):WaitForChild("SpawnHandler")
local aiCharacters = workspace:WaitForChild("AiCharacters")
local questHolder = player.PlayerGui.GameUI.Quests.QuestHolder
local targetQuestName = "Defeat Strong Souls"
local targetEnemies = {"Gravitron Soul", "Time Soul", "Light Soul"}
local punchToolName = "Star Sword"
local teleportPosition = Vector3.new(232, 3, -703)
local toggle = true  -- Toggle to start/stop the autofarm
local autoClickPosition = Vector2.new(903, 478)
local floatName = "FloatingPlatform"
local StarterGui = game:GetService("StarterGui")

-- Function to send notifications instead of print
local function sendNotification(title, text)
    StarterGui:SetCore("SendNotification", {
        Title = title;
        Text = text;
        Duration = 5;
    })
end

-- Function to check if character is alive
local function isCharacterAlive()
    local character = workspace:FindFirstChild("Venqtrix")
    return character and character:FindFirstChild("Customizations") ~= nil
end

-- Function to create a floating platform under player
local function createFloatingPlatform()
    local character = player.Character
    if character and not character:FindFirstChild(floatName) then
        local Float = Instance.new('Part')
        Float.Name = floatName
        Float.Parent = character
        Float.Transparency = 1
        Float.Size = Vector3.new(2, 0.2, 1.5)
        Float.Anchored = true
        local FloatValue = -3.1

        -- Update the platform position under character
        local function FloatPadLoop()
            if character:FindFirstChild(floatName) and character:FindFirstChild("HumanoidRootPart") then
                Float.CFrame = character.HumanoidRootPart.CFrame * CFrame.new(0, FloatValue, 0)
            else
                Float:Destroy()
            end
        end

        game:GetService("RunService").Heartbeat:Connect(FloatPadLoop)
        sendNotification("Platform", "Floating platform created under character.")
    end
end

-- Function to respawn character and create platform under player
local function respawnCharacter()
    spawnRemote:FireServer(1)
    wait(2)  -- Wait a moment for respawn
    createFloatingPlatform()
end

-- Function to check if the quest is active
local function hasQuest()
    if questHolder:FindFirstChild("Quest") and questHolder.Quest:FindFirstChild("QuestName") then
        local questName = questHolder.Quest.QuestName.ContentText
        sendNotification("Quest Status", "Currently active quest: " .. questName)
        return questName == targetQuestName
    else
        sendNotification("Quest Status", "No active quest found in QuestHolder.")
    end
    return false
end

-- Function to check if quest is completed
local function isQuestCompleted()
    local questProgressPath = player.PlayerGui.GameUI.Quests.InformationFrame.ScrollingFrame:FindFirstChild("QuestPartProgress")
    if questProgressPath and questProgressPath:FindFirstChild("Progress") then
        sendNotification("Quest Progress", "Quest progress: " .. questProgressPath.Progress.ContentText)
        return questProgressPath.Progress.ContentText == "3/3"
    else
        sendNotification("Quest Progress", "Quest progress path or progress not found.")
    end
    return false
end

-- Function to get and equip the Punch tool
local function equipPunchTool()
    local tool = player.Backpack:FindFirstChild(punchToolName)
    if tool then
        tool.Parent = player.Character
    end
end

-- Function to take the Strong Soul quest and initiate dialogue
local function takeQuest()
    sendNotification("Quest", "Attempting to take quest...")
    player.Character:SetPrimaryPartCFrame(CFrame.new(teleportPosition))
    wait(1)  -- 1-second delay
    fireproximityprompt(workspace.NPCs.Agor.ProximityPrompt)
    
    -- Fire the dialogue remote 6 times to reliably accept the quest
    for _ = 1, 6 do
        replicatedStorage.ClientRemotes.DialogueHandler:FireServer(1)
        wait(1)
    end
end

-- Function to complete the quest with dialogue sequence
local function completeQuest()
    sendNotification("Quest", "Starting quest completion process...")
    player.Character:SetPrimaryPartCFrame(CFrame.new(teleportPosition))
    wait(1)
    
    local prompt = workspace.NPCs.Agor:FindFirstChild("ProximityPrompt")
    if prompt then
        fireproximityprompt(prompt)
    else
        sendNotification("Quest", "Proximity prompt not found!")
        return
    end
    
    -- Fire the dialogue remotes in sequence with retries for reliability
    for i = 1, 2 do
        replicatedStorage.ClientRemotes.DialogueHandler:FireServer(2)
        wait(1)
    end
    replicatedStorage.ClientRemotes.DialogueHandler:FireServer(1)
    wait(1)
    replicatedStorage.ClientRemotes.DialogueHandler:FireServer(1)
    
    sendNotification("Quest", "Quest completion process finished.")
end

-- Function to teleport behind and attack the enemy in a loop
local function attackEnemy(enemy)
    sendNotification("Combat", "Attacking enemy: " .. enemy.Name)
    while enemy.Parent and enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 and isCharacterAlive() do
        local enemyPos = enemy.PrimaryPart.Position - enemy.PrimaryPart.CFrame.LookVector * 5
        player.Character:SetPrimaryPartCFrame(CFrame.new(enemyPos, enemy.PrimaryPart.Position))
        
        equipPunchTool()
        
        game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, true, nil, 0)
        wait(0.1)
        game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, false, nil, 0)
        
        wait(0.1)
    end
end

-- Main loop
spawn(function()
    while toggle do
        if not isCharacterAlive() then
            respawnCharacter()
            wait(2)
        end

        equipPunchTool()

        if not hasQuest() then
            sendNotification("Quest", "Quest not active. Attempting to take quest.")
            takeQuest()
            wait(2)
        end

        if hasQuest() and isQuestCompleted() then
            sendNotification("Quest", "Quest completed. Attempting to complete quest dialogue.")
            completeQuest()
            wait(2)
        end

        if hasQuest() then
            for _, enemy in ipairs(aiCharacters:GetChildren()) do
                if isCharacterAlive() and enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 then
                    for _, targetName in ipairs(targetEnemies) do
                        if enemy.Name:find(targetName) then
                            attackEnemy(enemy)
                            break
                        end
                    end
                end
            end
        end

        wait(0.5)
    end
end)
