-- Initialize paths and settings
local player = game:GetService("Players").LocalPlayer
local replicatedStorage = game:GetService("ReplicatedStorage")
local workspace = game:GetService("Workspace")
local spawnRemote = replicatedStorage:WaitForChild("ClientRemotes"):WaitForChild("SpawnHandler")
local aiCharacters = workspace:WaitForChild("AiCharacters")
local questHolder = player.PlayerGui.GameUI.Quests.QuestHolder
local targetQuestName = "Defeat Strong Souls"
local targetEnemies = {"Gravitron Soul", "Time Soul", "Light Soul"}
local punchToolName = "Star Sword"
local teleportPosition = Vector3.new(232, 3, -703)
local toggle = true  -- Toggle to start/stop the autofarm
local autoClickPosition = Vector2.new(903, 478)
local floatName = "FloatingPlatform"

-- Function to check if character is alive
local function isCharacterAlive()
    local character = workspace:FindFirstChild("Venqtrix")
    return character and character:FindFirstChild("Customizations") ~= nil
end

-- Function to create a floating platform under player
local function createFloatingPlatform()
    local character = player.Character
    if character and not character:FindFirstChild(floatName) then
        local Float = Instance.new('Part')
        Float.Name = floatName
        Float.Parent = character
        Float.Transparency = 1
        Float.Size = Vector3.new(2, 0.2, 1.5)
        Float.Anchored = true
        local FloatValue = -3.1

        -- Update the platform position under character
        local function FloatPadLoop()
            if character:FindFirstChild(floatName) and character:FindFirstChild("HumanoidRootPart") then
                Float.CFrame = character.HumanoidRootPart.CFrame * CFrame.new(0, FloatValue, 0)
            else
                Float:Destroy()
            end
        end

        game:GetService("RunService").Heartbeat:Connect(FloatPadLoop)
        game:GetService("CoreGui"):SetCore("SendNotification", {
            Title = "Platform Created",
            Text = "Floating platform created under character.",
            Duration = 2
        })
    end
end

-- Function to respawn character and create platform under player
local function respawnCharacter()
    spawnRemote:FireServer(1)
    wait(2)  -- Wait a moment for respawn
    createFloatingPlatform()
end

-- Function to check if the quest is active
local function hasQuest()
    if questHolder:FindFirstChild("Quest") and questHolder.Quest:FindFirstChild("QuestName") then
        local questName = questHolder.Quest.QuestName.ContentText
        game:GetService("CoreGui"):SetCore("SendNotification", {
            Title = "Quest Active",
            Text = "Currently active quest: " .. questName,
            Duration = 2
        })
        return questName == targetQuestName
    else
        game:GetService("CoreGui"):SetCore("SendNotification", {
            Title = "No Active Quest",
            Text = "No active quest found in QuestHolder.",
            Duration = 2
        })
    end
    return false
end

-- Function to check if quest is completed
local function isQuestCompleted()
    local questProgressPath = player.PlayerGui.GameUI.Quests.InformationFrame.ScrollingFrame:FindFirstChild("QuestPartProgress")
    if questProgressPath and questProgressPath:FindFirstChild("Progress") then
        local progressText = questProgressPath.Progress.ContentText
        game:GetService("CoreGui"):SetCore("SendNotification", {
            Title = "Quest Progress",
            Text = "Quest progress: " .. progressText,
            Duration = 2
        })
        return progressText == "3/3"
    else
        game:GetService("CoreGui"):SetCore("SendNotification", {
            Title = "Progress Not Found",
            Text = "Quest progress path or progress not found.",
            Duration = 2
        })
    end
    return false
end

-- Function to get and equip the Punch tool
local function equipPunchTool()
    local tool = player.Backpack:FindFirstChild(punchToolName)
    if tool then
        tool.Parent = player.Character
    end
end

-- Function to take the Strong Soul quest and initiate dialogue
local function takeQuest()
    game:GetService("CoreGui"):SetCore("SendNotification", {
        Title = "Taking Quest",
        Text = "Attempting to take quest...",
        Duration = 2
    })
    player.Character:SetPrimaryPartCFrame(CFrame.new(teleportPosition))
    wait(1)  -- 1-second delay
    fireproximityprompt(workspace.NPCs.Agor.ProximityPrompt)
    
    -- Fire the dialogue remote 6 times to reliably accept the quest
    for _ = 1, 6 do
        replicatedStorage.ClientRemotes.DialogueHandler:FireServer(1)
        wait(1)
    end
end

-- Function to complete the quest with dialogue sequence
local function completeQuest()
    game:GetService("CoreGui"):SetCore("SendNotification", {
        Title = "Completing Quest",
        Text = "Starting quest completion process...",
        Duration = 2
    })
    player.Character:SetPrimaryPartCFrame(CFrame.new(teleportPosition))
    wait(1)
    
    local prompt = workspace.NPCs.Agor:FindFirstChild("ProximityPrompt")
    if prompt then
        game:GetService("CoreGui"):SetCore("SendNotification", {
            Title = "Quest Dialogue",
            Text = "Firing proximity prompt to start quest completion dialogue.",
            Duration = 2
        })
        fireproximityprompt(prompt)
    else
        game:GetService("CoreGui"):SetCore("SendNotification", {
            Title = "No Prompt",
            Text = "Proximity prompt not found!",
            Duration = 2
        })
        return
    end
    
    -- Fire the dialogue remotes in sequence with retries for reliability
    for i = 1, 2 do
        game:GetService("CoreGui"):SetCore("SendNotification", {
            Title = "Quest Dialogue",
            Text = "Firing dialogue step 1...",
            Duration = 2
        })
        replicatedStorage.ClientRemotes.DialogueHandler:FireServer(2)
        wait(1)
    end
    
    game:GetService("CoreGui"):SetCore("SendNotification", {
        Title = "Quest Dialogue",
        Text = "Firing dialogue step 2...",
        Duration = 2
    })
    replicatedStorage.ClientRemotes.DialogueHandler:FireServer(1)
    wait(1)
    
    game:GetService("CoreGui"):SetCore("SendNotification", {
        Title = "Quest Dialogue",
        Text = "Firing dialogue step 3...",
        Duration = 2
    })
    replicatedStorage.ClientRemotes.DialogueHandler:FireServer(1)
    
    game:GetService("CoreGui"):SetCore("SendNotification", {
        Title = "Quest Completed",
        Text = "Quest completion process finished.",
        Duration = 2
    })
end

-- Function to teleport behind and attack the enemy in a loop
local function attackEnemy(enemy)
    while enemy.Parent and enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 and isCharacterAlive() do
        -- Position 5 studs behind the enemy and face it
        local enemyPos = enemy.PrimaryPart.Position - enemy.PrimaryPart.CFrame.LookVector * 5
        player.Character:SetPrimaryPartCFrame(CFrame.new(enemyPos, enemy.PrimaryPart.Position))
        
        -- Equip Punch tool
        equipPunchTool()
        
        -- Auto-clicking functionality
        game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, true, nil, 0)
        wait(0.1)
        game:GetService("VirtualInputManager"):SendMouseButtonEvent(autoClickPosition.X, autoClickPosition.Y, 0, false, nil, 0)
        
        -- Small delay to simulate attacking and give time for re-teleport
        wait(0.1)
    end
end

-- Main loop
spawn(function()
    while toggle do
        -- Step 1: Ensure character is alive
        if not isCharacterAlive() then
            respawnCharacter()
            wait(2)  -- Wait a moment for respawn
        end

        -- Step 2: Equip punch tool
        equipPunchTool()

        -- Step 3: Check for the quest; only attempt to retake if no active quest is found
        if not hasQuest() then
            game:GetService("CoreGui"):SetCore("SendNotification", {
                Title = "Quest Not Active",
                Text = "Quest not active. Attempting to take quest.",
                Duration = 2
            })
            takeQuest()
            wait(2)  -- Small wait after taking the quest
        end

        -- Step 4: Check if quest is completed
        if hasQuest() and isQuestCompleted() then
            game:GetService("CoreGui"):SetCore("SendNotification", {
                Title = "Quest Completed",
                Text = "Quest completed. Attempting to complete quest dialogue.",
                Duration = 2
            })
            completeQuest()
            wait(2)  -- Wait after completing quest to reset
        end

        -- Step 5: Loop through enemies and attack quest targets only if quest is active
        if hasQuest() then
            for _, enemy in ipairs(aiCharacters:GetChildren()) do
                if isCharacterAlive() and enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 then
                    -- Check if enemy is a quest target
                    for _, targetName in ipairs(targetEnemies) do
                        if enemy.Name:find(targetName) then
                            game:GetService("CoreGui"):SetCore("SendNotification", {
                                Title = "Attacking Enemy",
                                Text = "Attacking enemy: " .. enemy.Name,
                                Duration = 2
                            })
                            attackEnemy(enemy)
                            break  -- Move to the next enemy once this one is dead
                        end
                    end
                end
            end
        end

        wait(0.5)  -- Delay before restarting the loop
    end
end)
